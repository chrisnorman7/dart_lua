// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for Lua.
class DartLua {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartLua(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartLua.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<wchar_t> _Expression,
    ffi.Pointer<wchar_t> _FunctionName,
    ffi.Pointer<wchar_t> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, ffi.Uint32, uintptr_t)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, int, int)>();

  ffi.Pointer<ffi.Int32> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>('_errno');
  late final __errno =
      __errnoPtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int32)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int32>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int32>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _lua_ident =
      _lookup<ffi.Pointer<ffi.Int8>>('lua_ident');

  ffi.Pointer<ffi.Int8> get lua_ident => _lua_ident.value;

  set lua_ident(ffi.Pointer<ffi.Int8> value) => _lua_ident.value = value;

  ffi.Pointer<lua_State> lua_newstate(
    lua_Alloc f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_newstate(
      f,
      ud,
    );
  }

  late final _lua_newstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(
              lua_Alloc, ffi.Pointer<ffi.Void>)>>('lua_newstate');
  late final _lua_newstate = _lua_newstatePtr.asFunction<
      ffi.Pointer<lua_State> Function(lua_Alloc, ffi.Pointer<ffi.Void>)>();

  void lua_close(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_close(
      L,
    );
  }

  late final _lua_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'lua_close');
  late final _lua_close =
      _lua_closePtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<lua_State> lua_newthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_newthread(
      L,
    );
  }

  late final _lua_newthreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(
              ffi.Pointer<lua_State>)>>('lua_newthread');
  late final _lua_newthread = _lua_newthreadPtr
      .asFunction<ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>)>();

  int lua_resetthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_resetthread(
      L,
    );
  }

  late final _lua_resetthreadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_resetthread');
  late final _lua_resetthread =
      _lua_resetthreadPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  lua_CFunction lua_atpanic(
    ffi.Pointer<lua_State> L,
    lua_CFunction panicf,
  ) {
    return _lua_atpanic(
      L,
      panicf,
    );
  }

  late final _lua_atpanicPtr = _lookup<
      ffi.NativeFunction<
          lua_CFunction Function(
              ffi.Pointer<lua_State>, lua_CFunction)>>('lua_atpanic');
  late final _lua_atpanic = _lua_atpanicPtr.asFunction<
      lua_CFunction Function(ffi.Pointer<lua_State>, lua_CFunction)>();

  double lua_version(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_version(
      L,
    );
  }

  late final _lua_versionPtr =
      _lookup<ffi.NativeFunction<lua_Number Function(ffi.Pointer<lua_State>)>>(
          'lua_version');
  late final _lua_version =
      _lua_versionPtr.asFunction<double Function(ffi.Pointer<lua_State>)>();

  int lua_absindex(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_absindex(
      L,
      idx,
    );
  }

  late final _lua_absindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_absindex');
  late final _lua_absindex =
      _lua_absindexPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_gettop(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gettop(
      L,
    );
  }

  late final _lua_gettopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_gettop');
  late final _lua_gettop =
      _lua_gettopPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  void lua_settop(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_settop(
      L,
      idx,
    );
  }

  late final _lua_settopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_settop');
  late final _lua_settop =
      _lua_settopPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_pushvalue(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_pushvalue(
      L,
      idx,
    );
  }

  late final _lua_pushvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_pushvalue');
  late final _lua_pushvalue = _lua_pushvaluePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_rotate(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rotate(
      L,
      idx,
      n,
    );
  }

  late final _lua_rotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_rotate');
  late final _lua_rotate = _lua_rotatePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_copy(
    ffi.Pointer<lua_State> L,
    int fromidx,
    int toidx,
  ) {
    return _lua_copy(
      L,
      fromidx,
      toidx,
    );
  }

  late final _lua_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_copy');
  late final _lua_copy = _lua_copyPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_checkstack(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_checkstack(
      L,
      n,
    );
  }

  late final _lua_checkstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_checkstack');
  late final _lua_checkstack = _lua_checkstackPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void lua_xmove(
    ffi.Pointer<lua_State> from,
    ffi.Pointer<lua_State> to,
    int n,
  ) {
    return _lua_xmove(
      from,
      to,
      n,
    );
  }

  late final _lua_xmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>,
              ffi.Int32)>>('lua_xmove');
  late final _lua_xmove = _lua_xmovePtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>, int)>();

  int lua_isnumber(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isnumber(
      L,
      idx,
    );
  }

  late final _lua_isnumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_isnumber');
  late final _lua_isnumber =
      _lua_isnumberPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isstring(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isstring(
      L,
      idx,
    );
  }

  late final _lua_isstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_isstring');
  late final _lua_isstring =
      _lua_isstringPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_iscfunction(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_iscfunction(
      L,
      idx,
    );
  }

  late final _lua_iscfunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_iscfunction');
  late final _lua_iscfunction = _lua_iscfunctionPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isinteger(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isinteger(
      L,
      idx,
    );
  }

  late final _lua_isintegerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_isinteger');
  late final _lua_isinteger =
      _lua_isintegerPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_isuserdata(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_isuserdata(
      L,
      idx,
    );
  }

  late final _lua_isuserdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_isuserdata');
  late final _lua_isuserdata = _lua_isuserdataPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_type(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_type(
      L,
      idx,
    );
  }

  late final _lua_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_type');
  late final _lua_type =
      _lua_typePtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Int8> lua_typename(
    ffi.Pointer<lua_State> L,
    int tp,
  ) {
    return _lua_typename(
      L,
      tp,
    );
  }

  late final _lua_typenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_typename');
  late final _lua_typename = _lua_typenamePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int)>();

  double lua_tonumberx(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int32> isnum,
  ) {
    return _lua_tonumberx(
      L,
      idx,
      isnum,
    );
  }

  late final _lua_tonumberxPtr = _lookup<
      ffi.NativeFunction<
          lua_Number Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int32>)>>('lua_tonumberx');
  late final _lua_tonumberx = _lua_tonumberxPtr.asFunction<
      double Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int32>)>();

  int lua_tointegerx(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int32> isnum,
  ) {
    return _lua_tointegerx(
      L,
      idx,
      isnum,
    );
  }

  late final _lua_tointegerxPtr = _lookup<
      ffi.NativeFunction<
          lua_Integer Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int32>)>>('lua_tointegerx');
  late final _lua_tointegerx = _lua_tointegerxPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int32>)>();

  int lua_toboolean(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_toboolean(
      L,
      idx,
    );
  }

  late final _lua_tobooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_toboolean');
  late final _lua_toboolean =
      _lua_tobooleanPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Int8> lua_tolstring(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<size_t> len,
  ) {
    return _lua_tolstring(
      L,
      idx,
      len,
    );
  }

  late final _lua_tolstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<size_t>)>>('lua_tolstring');
  late final _lua_tolstring = _lua_tolstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<size_t>)>();

  int lua_rawlen(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawlen(
      L,
      idx,
    );
  }

  late final _lua_rawlenPtr = _lookup<
      ffi.NativeFunction<
          lua_Unsigned Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_rawlen');
  late final _lua_rawlen =
      _lua_rawlenPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  lua_CFunction lua_tocfunction(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tocfunction(
      L,
      idx,
    );
  }

  late final _lua_tocfunctionPtr = _lookup<
      ffi.NativeFunction<
          lua_CFunction Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_tocfunction');
  late final _lua_tocfunction = _lua_tocfunctionPtr
      .asFunction<lua_CFunction Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Void> lua_touserdata(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_touserdata(
      L,
      idx,
    );
  }

  late final _lua_touserdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_touserdata');
  late final _lua_touserdata = _lua_touserdataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<lua_State> lua_tothread(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_tothread(
      L,
      idx,
    );
  }

  late final _lua_tothreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<lua_State> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_tothread');
  late final _lua_tothread = _lua_tothreadPtr.asFunction<
      ffi.Pointer<lua_State> Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Void> lua_topointer(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_topointer(
      L,
      idx,
    );
  }

  late final _lua_topointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_topointer');
  late final _lua_topointer = _lua_topointerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int)>();

  void lua_arith(
    ffi.Pointer<lua_State> L,
    int op,
  ) {
    return _lua_arith(
      L,
      op,
    );
  }

  late final _lua_arithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_arith');
  late final _lua_arith =
      _lua_arithPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int lua_rawequal(
    ffi.Pointer<lua_State> L,
    int idx1,
    int idx2,
  ) {
    return _lua_rawequal(
      L,
      idx1,
      idx2,
    );
  }

  late final _lua_rawequalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_rawequal');
  late final _lua_rawequal = _lua_rawequalPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_compare(
    ffi.Pointer<lua_State> L,
    int idx1,
    int idx2,
    int op,
  ) {
    return _lua_compare(
      L,
      idx1,
      idx2,
      op,
    );
  }

  late final _lua_comparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32,
              ffi.Int32)>>('lua_compare');
  late final _lua_compare = _lua_comparePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int, int)>();

  void lua_pushnil(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_pushnil(
      L,
    );
  }

  late final _lua_pushnilPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'lua_pushnil');
  late final _lua_pushnil =
      _lua_pushnilPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void lua_pushnumber(
    ffi.Pointer<lua_State> L,
    double n,
  ) {
    return _lua_pushnumber(
      L,
      n,
    );
  }

  late final _lua_pushnumberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, lua_Number)>>('lua_pushnumber');
  late final _lua_pushnumber = _lua_pushnumberPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, double)>();

  void lua_pushinteger(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_pushinteger(
      L,
      n,
    );
  }

  late final _lua_pushintegerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, lua_Integer)>>('lua_pushinteger');
  late final _lua_pushinteger = _lua_pushintegerPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<ffi.Int8> lua_pushlstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
    int len,
  ) {
    return _lua_pushlstring(
      L,
      s,
      len,
    );
  }

  late final _lua_pushlstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>, size_t)>>('lua_pushlstring');
  late final _lua_pushlstring = _lua_pushlstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, int)>();

  ffi.Pointer<ffi.Int8> lua_pushstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _lua_pushstring(
      L,
      s,
    );
  }

  late final _lua_pushstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('lua_pushstring');
  late final _lua_pushstring = _lua_pushstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> lua_pushvfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
    va_list argp,
  ) {
    return _lua_pushvfstring(
      L,
      fmt,
      argp,
    );
  }

  late final _lua_pushvfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>, va_list)>>('lua_pushvfstring');
  late final _lua_pushvfstring = _lua_pushvfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, va_list)>();

  ffi.Pointer<ffi.Int8> lua_pushfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _lua_pushfstring(
      L,
      fmt,
    );
  }

  late final _lua_pushfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('lua_pushfstring');
  late final _lua_pushfstring = _lua_pushfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  void lua_pushcclosure(
    ffi.Pointer<lua_State> L,
    lua_CFunction fn,
    int n,
  ) {
    return _lua_pushcclosure(
      L,
      fn,
      n,
    );
  }

  late final _lua_pushcclosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_CFunction,
              ffi.Int32)>>('lua_pushcclosure');
  late final _lua_pushcclosure = _lua_pushcclosurePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, lua_CFunction, int)>();

  void lua_pushboolean(
    ffi.Pointer<lua_State> L,
    int b,
  ) {
    return _lua_pushboolean(
      L,
      b,
    );
  }

  late final _lua_pushbooleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_pushboolean');
  late final _lua_pushboolean = _lua_pushbooleanPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_pushlightuserdata(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_pushlightuserdata(
      L,
      p,
    );
  }

  late final _lua_pushlightuserdataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>)>>('lua_pushlightuserdata');
  late final _lua_pushlightuserdata = _lua_pushlightuserdataPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>)>();

  int lua_pushthread(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_pushthread(
      L,
    );
  }

  late final _lua_pushthreadPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_pushthread');
  late final _lua_pushthread =
      _lua_pushthreadPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_getglobal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _lua_getglobal(
      L,
      name,
    );
  }

  late final _lua_getglobalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>>('lua_getglobal');
  late final _lua_getglobal = _lua_getglobalPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  int lua_gettable(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_gettable(
      L,
      idx,
    );
  }

  late final _lua_gettablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_gettable');
  late final _lua_gettable =
      _lua_gettablePtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_getfield(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> k,
  ) {
    return _lua_getfield(
      L,
      idx,
      k,
    );
  }

  late final _lua_getfieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('lua_getfield');
  late final _lua_getfield = _lua_getfieldPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  int lua_geti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_geti(
      L,
      idx,
      n,
    );
  }

  late final _lua_getiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32, lua_Integer)>>('lua_geti');
  late final _lua_geti =
      _lua_getiPtr.asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_rawget(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawget(
      L,
      idx,
    );
  }

  late final _lua_rawgetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_rawget');
  late final _lua_rawget =
      _lua_rawgetPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_rawgeti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rawgeti(
      L,
      idx,
      n,
    );
  }

  late final _lua_rawgetiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32, lua_Integer)>>('lua_rawgeti');
  late final _lua_rawgeti = _lua_rawgetiPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_rawgetp(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_rawgetp(
      L,
      idx,
      p,
    );
  }

  late final _lua_rawgetpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('lua_rawgetp');
  late final _lua_rawgetp = _lua_rawgetpPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Void>)>();

  void lua_createtable(
    ffi.Pointer<lua_State> L,
    int narr,
    int nrec,
  ) {
    return _lua_createtable(
      L,
      narr,
      nrec,
    );
  }

  late final _lua_createtablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Int32)>>('lua_createtable');
  late final _lua_createtable = _lua_createtablePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  ffi.Pointer<ffi.Void> lua_newuserdatauv(
    ffi.Pointer<lua_State> L,
    int sz,
    int nuvalue,
  ) {
    return _lua_newuserdatauv(
      L,
      sz,
      nuvalue,
    );
  }

  late final _lua_newuserdatauvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, size_t, ffi.Int32)>>('lua_newuserdatauv');
  late final _lua_newuserdatauv = _lua_newuserdatauvPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int, int)>();

  int lua_getmetatable(
    ffi.Pointer<lua_State> L,
    int objindex,
  ) {
    return _lua_getmetatable(
      L,
      objindex,
    );
  }

  late final _lua_getmetatablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_getmetatable');
  late final _lua_getmetatable = _lua_getmetatablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_getiuservalue(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_getiuservalue(
      L,
      idx,
      n,
    );
  }

  late final _lua_getiuservaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Int32)>>('lua_getiuservalue');
  late final _lua_getiuservalue = _lua_getiuservaluePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_setglobal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _lua_setglobal(
      L,
      name,
    );
  }

  late final _lua_setglobalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>>('lua_setglobal');
  late final _lua_setglobal = _lua_setglobalPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  void lua_settable(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_settable(
      L,
      idx,
    );
  }

  late final _lua_settablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_settable');
  late final _lua_settable =
      _lua_settablePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_setfield(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> k,
  ) {
    return _lua_setfield(
      L,
      idx,
      k,
    );
  }

  late final _lua_setfieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('lua_setfield');
  late final _lua_setfield = _lua_setfieldPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void lua_seti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_seti(
      L,
      idx,
      n,
    );
  }

  late final _lua_setiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, lua_Integer)>>('lua_seti');
  late final _lua_seti = _lua_setiPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_rawset(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_rawset(
      L,
      idx,
    );
  }

  late final _lua_rawsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_rawset');
  late final _lua_rawset =
      _lua_rawsetPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_rawseti(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_rawseti(
      L,
      idx,
      n,
    );
  }

  late final _lua_rawsetiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, lua_Integer)>>('lua_rawseti');
  late final _lua_rawseti = _lua_rawsetiPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_rawsetp(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Void> p,
  ) {
    return _lua_rawsetp(
      L,
      idx,
      p,
    );
  }

  late final _lua_rawsetpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('lua_rawsetp');
  late final _lua_rawsetp = _lua_rawsetpPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Void>)>();

  int lua_setmetatable(
    ffi.Pointer<lua_State> L,
    int objindex,
  ) {
    return _lua_setmetatable(
      L,
      objindex,
    );
  }

  late final _lua_setmetatablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_setmetatable');
  late final _lua_setmetatable = _lua_setmetatablePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_setiuservalue(
    ffi.Pointer<lua_State> L,
    int idx,
    int n,
  ) {
    return _lua_setiuservalue(
      L,
      idx,
      n,
    );
  }

  late final _lua_setiuservaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Int32)>>('lua_setiuservalue');
  late final _lua_setiuservalue = _lua_setiuservaluePtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_callk(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
    int ctx,
    lua_KFunction k,
  ) {
    return _lua_callk(
      L,
      nargs,
      nresults,
      ctx,
      k,
    );
  }

  late final _lua_callkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32,
              lua_KContext, lua_KFunction)>>('lua_callk');
  late final _lua_callk = _lua_callkPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, int, int, lua_KFunction)>();

  int lua_pcallk(
    ffi.Pointer<lua_State> L,
    int nargs,
    int nresults,
    int errfunc,
    int ctx,
    lua_KFunction k,
  ) {
    return _lua_pcallk(
      L,
      nargs,
      nresults,
      errfunc,
      ctx,
      k,
    );
  }

  late final _lua_pcallkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32,
              ffi.Int32, lua_KContext, lua_KFunction)>>('lua_pcallk');
  late final _lua_pcallk = _lua_pcallkPtr.asFunction<
      int Function(
          ffi.Pointer<lua_State>, int, int, int, int, lua_KFunction)>();

  int lua_load(
    ffi.Pointer<lua_State> L,
    lua_Reader reader,
    ffi.Pointer<ffi.Void> dt,
    ffi.Pointer<ffi.Int8> chunkname,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _lua_load(
      L,
      reader,
      dt,
      chunkname,
      mode,
    );
  }

  late final _lua_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>,
              lua_Reader,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('lua_load');
  late final _lua_load = _lua_loadPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, lua_Reader, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int lua_dump(
    ffi.Pointer<lua_State> L,
    lua_Writer writer,
    ffi.Pointer<ffi.Void> data,
    int strip,
  ) {
    return _lua_dump(
      L,
      writer,
      data,
      strip,
    );
  }

  late final _lua_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, lua_Writer,
              ffi.Pointer<ffi.Void>, ffi.Int32)>>('lua_dump');
  late final _lua_dump = _lua_dumpPtr.asFunction<
      int Function(
          ffi.Pointer<lua_State>, lua_Writer, ffi.Pointer<ffi.Void>, int)>();

  int lua_yieldk(
    ffi.Pointer<lua_State> L,
    int nresults,
    int ctx,
    lua_KFunction k,
  ) {
    return _lua_yieldk(
      L,
      nresults,
      ctx,
      k,
    );
  }

  late final _lua_yieldkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32, lua_KContext,
              lua_KFunction)>>('lua_yieldk');
  late final _lua_yieldk = _lua_yieldkPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, int, lua_KFunction)>();

  int lua_resume(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> from,
    int narg,
    ffi.Pointer<ffi.Int32> nres,
  ) {
    return _lua_resume(
      L,
      from,
      narg,
      nres,
    );
  }

  late final _lua_resumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>,
              ffi.Int32, ffi.Pointer<ffi.Int32>)>>('lua_resume');
  late final _lua_resume = _lua_resumePtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>, int,
          ffi.Pointer<ffi.Int32>)>();

  int lua_status(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_status(
      L,
    );
  }

  late final _lua_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_status');
  late final _lua_status =
      _lua_statusPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_isyieldable(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_isyieldable(
      L,
    );
  }

  late final _lua_isyieldablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_isyieldable');
  late final _lua_isyieldable =
      _lua_isyieldablePtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  void lua_setwarnf(
    ffi.Pointer<lua_State> L,
    lua_WarnFunction f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_setwarnf(
      L,
      f,
      ud,
    );
  }

  late final _lua_setwarnfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_WarnFunction,
              ffi.Pointer<ffi.Void>)>>('lua_setwarnf');
  late final _lua_setwarnf = _lua_setwarnfPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, lua_WarnFunction, ffi.Pointer<ffi.Void>)>();

  void lua_warning(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> msg,
    int tocont,
  ) {
    return _lua_warning(
      L,
      msg,
      tocont,
    );
  }

  late final _lua_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('lua_warning');
  late final _lua_warning = _lua_warningPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, int)>();

  int lua_gc(
    ffi.Pointer<lua_State> L,
    int what,
  ) {
    return _lua_gc(
      L,
      what,
    );
  }

  late final _lua_gcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_gc');
  late final _lua_gc =
      _lua_gcPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int lua_error(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_error(
      L,
    );
  }

  late final _lua_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_error');
  late final _lua_error =
      _lua_errorPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_next(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_next(
      L,
      idx,
    );
  }

  late final _lua_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_next');
  late final _lua_next =
      _lua_nextPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void lua_concat(
    ffi.Pointer<lua_State> L,
    int n,
  ) {
    return _lua_concat(
      L,
      n,
    );
  }

  late final _lua_concatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_concat');
  late final _lua_concat =
      _lua_concatPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_len(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_len(
      L,
      idx,
    );
  }

  late final _lua_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_len');
  late final _lua_len =
      _lua_lenPtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int lua_stringtonumber(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _lua_stringtonumber(
      L,
      s,
    );
  }

  late final _lua_stringtonumberPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('lua_stringtonumber');
  late final _lua_stringtonumber = _lua_stringtonumberPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  lua_Alloc lua_getallocf(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ud,
  ) {
    return _lua_getallocf(
      L,
      ud,
    );
  }

  late final _lua_getallocfPtr = _lookup<
      ffi.NativeFunction<
          lua_Alloc Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('lua_getallocf');
  late final _lua_getallocf = _lua_getallocfPtr.asFunction<
      lua_Alloc Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void lua_setallocf(
    ffi.Pointer<lua_State> L,
    lua_Alloc f,
    ffi.Pointer<ffi.Void> ud,
  ) {
    return _lua_setallocf(
      L,
      f,
      ud,
    );
  }

  late final _lua_setallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Alloc,
              ffi.Pointer<ffi.Void>)>>('lua_setallocf');
  late final _lua_setallocf = _lua_setallocfPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, lua_Alloc, ffi.Pointer<ffi.Void>)>();

  void lua_toclose(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_toclose(
      L,
      idx,
    );
  }

  late final _lua_toclosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('lua_toclose');
  late final _lua_toclose =
      _lua_toclosePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  void lua_closeslot(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _lua_closeslot(
      L,
      idx,
    );
  }

  late final _lua_closeslotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('lua_closeslot');
  late final _lua_closeslot = _lua_closeslotPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int lua_getstack(
    ffi.Pointer<lua_State> L,
    int level,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getstack(
      L,
      level,
      ar,
    );
  }

  late final _lua_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<lua_Debug>)>>('lua_getstack');
  late final _lua_getstack = _lua_getstackPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<lua_Debug>)>();

  int lua_getinfo(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> what,
    ffi.Pointer<lua_Debug> ar,
  ) {
    return _lua_getinfo(
      L,
      what,
      ar,
    );
  }

  late final _lua_getinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<lua_Debug>)>>('lua_getinfo');
  late final _lua_getinfo = _lua_getinfoPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<lua_Debug>)>();

  ffi.Pointer<ffi.Int8> lua_getlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_getlocal(
      L,
      ar,
      n,
    );
  }

  late final _lua_getlocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<lua_Debug>, ffi.Int32)>>('lua_getlocal');
  late final _lua_getlocal = _lua_getlocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<lua_Debug>, int)>();

  ffi.Pointer<ffi.Int8> lua_setlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_Debug> ar,
    int n,
  ) {
    return _lua_setlocal(
      L,
      ar,
      n,
    );
  }

  late final _lua_setlocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<lua_Debug>, ffi.Int32)>>('lua_setlocal');
  late final _lua_setlocal = _lua_setlocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<lua_Debug>, int)>();

  ffi.Pointer<ffi.Int8> lua_getupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_getupvalue(
      L,
      funcindex,
      n,
    );
  }

  late final _lua_getupvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_getupvalue');
  late final _lua_getupvalue = _lua_getupvaluePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int, int)>();

  ffi.Pointer<ffi.Int8> lua_setupvalue(
    ffi.Pointer<lua_State> L,
    int funcindex,
    int n,
  ) {
    return _lua_setupvalue(
      L,
      funcindex,
      n,
    );
  }

  late final _lua_setupvaluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_setupvalue');
  late final _lua_setupvalue = _lua_setupvaluePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int, int)>();

  ffi.Pointer<ffi.Void> lua_upvalueid(
    ffi.Pointer<lua_State> L,
    int fidx,
    int n,
  ) {
    return _lua_upvalueid(
      L,
      fidx,
      n,
    );
  }

  late final _lua_upvalueidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('lua_upvalueid');
  late final _lua_upvalueid = _lua_upvalueidPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int, int)>();

  void lua_upvaluejoin(
    ffi.Pointer<lua_State> L,
    int fidx1,
    int n1,
    int fidx2,
    int n2,
  ) {
    return _lua_upvaluejoin(
      L,
      fidx1,
      n1,
      fidx2,
      n2,
    );
  }

  late final _lua_upvaluejoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32,
              ffi.Int32, ffi.Int32)>>('lua_upvaluejoin');
  late final _lua_upvaluejoin = _lua_upvaluejoinPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int, int, int)>();

  void lua_sethook(
    ffi.Pointer<lua_State> L,
    lua_Hook func,
    int mask,
    int count,
  ) {
    return _lua_sethook(
      L,
      func,
      mask,
      count,
    );
  }

  late final _lua_sethookPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Hook, ffi.Int32,
              ffi.Int32)>>('lua_sethook');
  late final _lua_sethook = _lua_sethookPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, lua_Hook, int, int)>();

  lua_Hook lua_gethook(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethook(
      L,
    );
  }

  late final _lua_gethookPtr =
      _lookup<ffi.NativeFunction<lua_Hook Function(ffi.Pointer<lua_State>)>>(
          'lua_gethook');
  late final _lua_gethook =
      _lua_gethookPtr.asFunction<lua_Hook Function(ffi.Pointer<lua_State>)>();

  int lua_gethookmask(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethookmask(
      L,
    );
  }

  late final _lua_gethookmaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_gethookmask');
  late final _lua_gethookmask =
      _lua_gethookmaskPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_gethookcount(
    ffi.Pointer<lua_State> L,
  ) {
    return _lua_gethookcount(
      L,
    );
  }

  late final _lua_gethookcountPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>(
          'lua_gethookcount');
  late final _lua_gethookcount =
      _lua_gethookcountPtr.asFunction<int Function(ffi.Pointer<lua_State>)>();

  int lua_setcstacklimit(
    ffi.Pointer<lua_State> L,
    int limit,
  ) {
    return _lua_setcstacklimit(
      L,
      limit,
    );
  }

  late final _lua_setcstacklimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Uint32)>>('lua_setcstacklimit');
  late final _lua_setcstacklimit = _lua_setcstacklimitPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  ffi.Pointer<FILE> __acrt_iob_func(
    int _Ix,
  ) {
    return ___acrt_iob_func(
      _Ix,
    );
  }

  late final ___acrt_iob_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Uint32)>>(
          '__acrt_iob_func');
  late final ___acrt_iob_func =
      ___acrt_iob_funcPtr.asFunction<ffi.Pointer<FILE> Function(int)>();

  int fgetwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('fgetwc');
  late final _fgetwc = _fgetwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetwchar() {
    return __fgetwchar();
  }

  late final __fgetwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_fgetwchar');
  late final __fgetwchar = __fgetwcharPtr.asFunction<int Function()>();

  int fputwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          'fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputwchar(
    int _Character,
  ) {
    return __fputwchar(
      _Character,
    );
  }

  late final __fputwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('_fputwchar');
  late final __fputwchar = __fputwcharPtr.asFunction<int Function(int)>();

  int getwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('getwc');
  late final _getwc = _getwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>();

  ffi.Pointer<wchar_t> fgetws(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Int32, ffi.Pointer<FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, int, ffi.Pointer<FILE>)>();

  int fputws(
    ffi.Pointer<wchar_t> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<wchar_t> _getws_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return __getws_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __getws_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, size_t)>>('_getws_s');
  late final __getws_s = __getws_sPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>, int)>();

  int putwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          'putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t)>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<int Function(int)>();

  int _putws(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return __putws(
      _Buffer,
    );
  }

  late final __putwsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_putws');
  late final __putws =
      __putwsPtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  int ungetwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          'ungetwc');
  late final _ungetwc =
      _ungetwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfdopen(
    int _FileHandle,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wfdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __wfdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<wchar_t>)>>('_wfdopen');
  late final __wfdopen = __wfdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> _wfopen(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wfopen(
      _FileName,
      _Mode,
    );
  }

  late final __wfopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wfopen');
  late final __wfopen = __wfopenPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wfopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wfopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>)>>('_wfopen_s');
  late final __wfopen_s = __wfopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> _wfreopen(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Pointer<FILE>)>>('_wfreopen');
  late final __wfreopen = __wfreopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  int _wfreopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
              ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>>('_wfreopen_s');
  late final __wfreopen_s = __wfreopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<wchar_t>,
          ffi.Pointer<wchar_t>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfsopen(
    ffi.Pointer<wchar_t> _FileName,
    ffi.Pointer<wchar_t> _Mode,
    int _ShFlag,
  ) {
    return __wfsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __wfsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>,
              ffi.Int32)>>('_wfsopen');
  late final __wfsopen = __wfsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>, int)>();

  void _wperror(
    ffi.Pointer<wchar_t> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<wchar_t>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<FILE> _wpopen(
    ffi.Pointer<wchar_t> _Command,
    ffi.Pointer<wchar_t> _Mode,
  ) {
    return __wpopen(
      _Command,
      _Mode,
    );
  }

  late final __wpopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wpopen');
  late final __wpopen = __wpopenPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wremove(
    ffi.Pointer<wchar_t> _FileName,
  ) {
    return __wremove(
      _FileName,
    );
  }

  late final __wremovePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<wchar_t>)>>(
          '_wremove');
  late final __wremove =
      __wremovePtr.asFunction<int Function(ffi.Pointer<wchar_t>)>();

  ffi.Pointer<wchar_t> _wtempnam(
    ffi.Pointer<wchar_t> _Directory,
    ffi.Pointer<wchar_t> _FilePrefix,
  ) {
    return __wtempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final __wtempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(
              ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>>('_wtempnam');
  late final __wtempnam = __wtempnamPtr.asFunction<
      ffi.Pointer<wchar_t> Function(
          ffi.Pointer<wchar_t>, ffi.Pointer<wchar_t>)>();

  int _wtmpnam_s(
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
  ) {
    return __wtmpnam_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __wtmpnam_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<wchar_t>, size_t)>>(
      '_wtmpnam_s');
  late final __wtmpnam_s =
      __wtmpnam_sPtr.asFunction<int Function(ffi.Pointer<wchar_t>, int)>();

  ffi.Pointer<wchar_t> _wtmpnam(
    ffi.Pointer<wchar_t> _Buffer,
  ) {
    return __wtmpnam(
      _Buffer,
    );
  }

  late final __wtmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>>('_wtmpnam');
  late final __wtmpnam = __wtmpnamPtr
      .asFunction<ffi.Pointer<wchar_t> Function(ffi.Pointer<wchar_t>)>();

  int _fgetwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetwc_nolock(
      _Stream,
    );
  }

  late final __fgetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_fgetwc_nolock');
  late final __fgetwc_nolock =
      __fgetwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          '_fputwc_nolock');
  late final __fputwc_nolock =
      __fputwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _getwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getwc_nolock(
      _Stream,
    );
  }

  late final __getwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_getwc_nolock');
  late final __getwc_nolock =
      __getwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wchar_t, ffi.Pointer<FILE>)>>(
          '_putwc_nolock');
  late final __putwc_nolock =
      __putwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          '_ungetwc_nolock');
  late final __ungetwc_nolock =
      __ungetwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int __stdio_common_vfwprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf');
  late final ___stdio_common_vfwprintf =
      ___stdio_common_vfwprintfPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>();

  int __stdio_common_vfwprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_s');
  late final ___stdio_common_vfwprintf_s =
      ___stdio_common_vfwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>();

  int __stdio_common_vfwprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_p');
  late final ___stdio_common_vfwprintf_p =
      ___stdio_common_vfwprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t,
              va_list)>();

  int __stdio_common_vfwscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vfwscanf');
  late final ___stdio_common_vfwscanf = ___stdio_common_vfwscanfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  int __stdio_common_vswprintf(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf');
  late final ___stdio_common_vswprintf =
      ___stdio_common_vswprintfPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              _locale_t, va_list)>();

  int __stdio_common_vswprintf_s(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_s');
  late final ___stdio_common_vswprintf_s =
      ___stdio_common_vswprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              _locale_t, va_list)>();

  int __stdio_common_vsnwprintf_s(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnwprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vsnwprintf_s');
  late final ___stdio_common_vsnwprintf_s =
      ___stdio_common_vsnwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, int,
              ffi.Pointer<wchar_t>, _locale_t, va_list)>();

  int __stdio_common_vswprintf_p(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_p');
  late final ___stdio_common_vswprintf_p =
      ___stdio_common_vswprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
              _locale_t, va_list)>();

  int __stdio_common_vswscanf(
    int _Options,
    ffi.Pointer<wchar_t> _Buffer,
    int _BufferCount,
    ffi.Pointer<wchar_t> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<wchar_t>,
              size_t,
              ffi.Pointer<wchar_t>,
              _locale_t,
              va_list)>>('__stdio_common_vswscanf');
  late final ___stdio_common_vswscanf = ___stdio_common_vswscanfPtr.asFunction<
      int Function(int, ffi.Pointer<wchar_t>, int, ffi.Pointer<wchar_t>,
          _locale_t, va_list)>();

  int _get_stream_buffer_pointers(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> _Count,
  ) {
    return __get_stream_buffer_pointers(
      _Stream,
      _Base,
      _Pointer,
      _Count,
    );
  }

  late final __get_stream_buffer_pointersPtr = _lookup<
          ffi.NativeFunction<
              errno_t Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      '_get_stream_buffer_pointers');
  late final __get_stream_buffer_pointers =
      __get_stream_buffer_pointersPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  int clearerr_s(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr_s(
      _Stream,
    );
  }

  late final _clearerr_sPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<FILE>)>>(
          'clearerr_s');
  late final _clearerr_s =
      _clearerr_sPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _fopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _fopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen_s');
  late final _fopen_s = _fopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int fread_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_sPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread_s');
  late final _fread_s = _fread_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int freopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _freopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _freopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<FILE>)>>('freopen_s');
  late final _freopen_s = _freopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int8> gets_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Size,
  ) {
    return _gets_s(
      _Buffer,
      _Size,
    );
  }

  late final _gets_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, rsize_t)>>('gets_s');
  late final _gets_s = _gets_sPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>, int)>();

  int tmpfile_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
  ) {
    return _tmpfile_s(
      _Stream,
    );
  }

  late final _tmpfile_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>)>>(
      'tmpfile_s');
  late final _tmpfile_s =
      _tmpfile_sPtr.asFunction<int Function(ffi.Pointer<ffi.Pointer<FILE>>)>();

  int tmpnam_s(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Size,
  ) {
    return _tmpnam_s(
      _Buffer,
      _Size,
    );
  }

  late final _tmpnam_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int8>, rsize_t)>>(
      'tmpnam_s');
  late final _tmpnam_s =
      _tmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  void clearerr(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr(
      _Stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fclose(
      _Stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fcloseall() {
    return __fcloseall();
  }

  late final __fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_fcloseall');
  late final __fcloseall = __fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> _fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return __fdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('_fdopen');
  late final __fdopen = __fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  int feof(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _feof(
      _Stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ferror(
      _Stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fflush(
      _Stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetc(
      _Stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetchar() {
    return __fgetchar();
  }

  late final __fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_fgetchar');
  late final __fgetchar = __fgetcharPtr.asFunction<int Function()>();

  int fgetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fgetpos(
      _Stream,
      _Position,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> _Buffer,
    int _MaxCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgets(
      _Buffer,
      _MaxCount,
      _Stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Int32, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, int, ffi.Pointer<FILE>)>();

  int _fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fileno(
      _Stream,
    );
  }

  late final __filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fileno');
  late final __fileno =
      __filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _flushall() {
    return __flushall();
  }

  late final __flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_flushall');
  late final __flushall = __flushallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return _fopen(
      _FileName,
      _Mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fputc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputc(
      _Character,
      _Stream,
    );
  }

  late final _fputcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputchar(
    int _Character,
  ) {
    return __fputchar(
      _Character,
    );
  }

  late final __fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('_fputchar');
  late final __fputchar = __fputcharPtr.asFunction<int Function(int)>();

  int fputs(
    ffi.Pointer<ffi.Int8> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputs(
      _Buffer,
      _Stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _freopen(
      _FileName,
      _Mode,
      _Stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _fsopen(
    ffi.Pointer<ffi.Int8> _FileName,
    ffi.Pointer<ffi.Int8> _Mode,
    int _ShFlag,
  ) {
    return __fsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __fsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('_fsopen');
  late final __fsopen = __fsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  int fsetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fsetpos(
      _Stream,
      _Position,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fseek(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('_fseeki64');
  late final __fseeki64 =
      __fseeki64Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftell(
      _Stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64(
      _Stream,
    );
  }

  late final __ftelli64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          '_ftelli64');
  late final __ftelli64 =
      __ftelli64Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fwrite(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getc(
      _Stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int _getmaxstdio() {
    return __getmaxstdio();
  }

  late final __getmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_getmaxstdio');
  late final __getmaxstdio = __getmaxstdioPtr.asFunction<int Function()>();

  int _getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getw(
      _Stream,
    );
  }

  late final __getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_getw');
  late final __getw = __getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Int8> _ErrorMessage,
  ) {
    return _perror(
      _ErrorMessage,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  int _pclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __pclose(
      _Stream,
    );
  }

  late final __pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_pclose');
  late final __pclose =
      __pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _popen(
    ffi.Pointer<ffi.Int8> _Command,
    ffi.Pointer<ffi.Int8> _Mode,
  ) {
    return __popen(
      _Command,
      _Mode,
    );
  }

  late final __popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_popen');
  late final __popen = __popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int putc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putc(
      _Character,
      _Stream,
    );
  }

  late final _putcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int _Character,
  ) {
    return _putchar(
      _Character,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _puts(
      _Buffer,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int _putw(
    int _Word,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putw(
      _Word,
      _Stream,
    );
  }

  late final __putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_putw');
  late final __putw =
      __putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int remove(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return _remove(
      _FileName,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int rename(
    ffi.Pointer<ffi.Int8> _OldFileName,
    ffi.Pointer<ffi.Int8> _NewFileName,
  ) {
    return _rename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int _unlink(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return __unlink(
      _FileName,
    );
  }

  late final __unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          '_unlink');
  late final __unlink =
      __unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  int unlink(
    ffi.Pointer<ffi.Int8> _FileName,
  ) {
    return _unlink1(
      _FileName,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>(
          'unlink');
  late final _unlink1 =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void rewind(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _rewind(
      _Stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _rmtmp() {
    return __rmtmp();
  }

  late final __rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('_rmtmp');
  late final __rmtmp = __rmtmpPtr.asFunction<int Function()>();

  void setbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _setbuf(
      _Stream,
      _Buffer,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>)>();

  int _setmaxstdio(
    int _Maximum,
  ) {
    return __setmaxstdio(
      _Maximum,
    );
  }

  late final __setmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          '_setmaxstdio');
  late final __setmaxstdio = __setmaxstdioPtr.asFunction<int Function(int)>();

  int setvbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _Mode,
    int _Size,
  ) {
    return _setvbuf(
      _Stream,
      _Buffer,
      _Mode,
      _Size,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>,
              ffi.Int32, size_t)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, int, int)>();

  ffi.Pointer<ffi.Int8> _tempnam(
    ffi.Pointer<ffi.Int8> _DirectoryName,
    ffi.Pointer<ffi.Int8> _FilePrefix,
  ) {
    return __tempnam(
      _DirectoryName,
      _FilePrefix,
    );
  }

  late final __tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('_tempnam');
  late final __tempnam = __tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> _Buffer,
  ) {
    return _tmpnam(
      _Buffer,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  int ungetc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetc(
      _Character,
      _Stream,
    );
  }

  late final _ungetcPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void _lock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __lock_file(
      _Stream,
    );
  }

  late final __lock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_lock_file');
  late final __lock_file =
      __lock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void _unlock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __unlock_file(
      _Stream,
    );
  }

  late final __unlock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_unlock_file');
  late final __unlock_file =
      __unlock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _fclose_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fclose_nolock(
      _Stream,
    );
  }

  late final __fclose_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fclose_nolock');
  late final __fclose_nolock =
      __fclose_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fflush_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fflush_nolock(
      _Stream,
    );
  }

  late final __fflush_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fflush_nolock');
  late final __fflush_nolock =
      __fflush_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetc_nolock(
      _Stream,
    );
  }

  late final __fgetc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_fgetc_nolock');
  late final __fgetc_nolock =
      __fgetc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputc_nolockPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_fputc_nolock');
  late final __fputc_nolock =
      __fputc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fread_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolockPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('_fread_nolock');
  late final __fread_nolock = __fread_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _fread_nolock_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolock_sPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t, size_t,
              ffi.Pointer<FILE>)>>('_fread_nolock_s');
  late final __fread_nolock_s = __fread_nolock_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int _fseek_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseek_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseek_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('_fseek_nolock');
  late final __fseek_nolock =
      __fseek_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Int64, ffi.Int32)>>('_fseeki64_nolock');
  late final __fseeki64_nolock = __fseeki64_nolockPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _ftell_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftell_nolock(
      _Stream,
    );
  }

  late final __ftell_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          '_ftell_nolock');
  late final __ftell_nolock =
      __ftell_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64_nolock(
      _Stream,
    );
  }

  late final __ftelli64_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<FILE>)>>(
          '_ftelli64_nolock');
  late final __ftelli64_nolock =
      __ftelli64_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fwrite_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fwrite_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fwrite_nolockPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(ffi.Pointer<ffi.Void>, size_t, size_t,
              ffi.Pointer<FILE>)>>('_fwrite_nolock');
  late final __fwrite_nolock = __fwrite_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _getc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getc_nolock(
      _Stream,
    );
  }

  late final __getc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          '_getc_nolock');
  late final __getc_nolock =
      __getc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putc_nolockPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_putc_nolock');
  late final __putc_nolock =
      __putc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetc_nolockPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      '_ungetc_nolock');
  late final __ungetc_nolock =
      __ungetc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int32> __p__commode() {
    return ___p__commode();
  }

  late final ___p__commodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int32> Function()>>(
          '__p__commode');
  late final ___p__commode =
      ___p__commodePtr.asFunction<ffi.Pointer<ffi.Int32> Function()>();

  int __stdio_common_vfprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf');
  late final ___stdio_common_vfprintf = ___stdio_common_vfprintfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, _locale_t, va_list)>();

  int __stdio_common_vfprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_s');
  late final ___stdio_common_vfprintf_s =
      ___stdio_common_vfprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, _locale_t,
              va_list)>();

  int __stdio_common_vfprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_p');
  late final ___stdio_common_vfprintf_p =
      ___stdio_common_vfprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, _locale_t,
              va_list)>();

  int _set_printf_count_output(
    int _Value,
  ) {
    return __set_printf_count_output(
      _Value,
    );
  }

  late final __set_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          '_set_printf_count_output');
  late final __set_printf_count_output =
      __set_printf_count_outputPtr.asFunction<int Function(int)>();

  int _get_printf_count_output() {
    return __get_printf_count_output();
  }

  late final __get_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          '_get_printf_count_output');
  late final __get_printf_count_output =
      __get_printf_count_outputPtr.asFunction<int Function()>();

  int __stdio_common_vfscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _Arglist,
  ) {
    return ___stdio_common_vfscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _Arglist,
    );
  }

  late final ___stdio_common_vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vfscanf');
  late final ___stdio_common_vfscanf = ___stdio_common_vfscanfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Int8>, _locale_t, va_list)>();

  int __stdio_common_vsprintf(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf');
  late final ___stdio_common_vsprintf = ___stdio_common_vsprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          _locale_t, va_list)>();

  int __stdio_common_vsprintf_s(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_s');
  late final ___stdio_common_vsprintf_s =
      ___stdio_common_vsprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
              _locale_t, va_list)>();

  int __stdio_common_vsnprintf_s(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              size_t,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vsnprintf_s');
  late final ___stdio_common_vsnprintf_s =
      ___stdio_common_vsnprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, int,
              ffi.Pointer<ffi.Int8>, _locale_t, va_list)>();

  int __stdio_common_vsprintf_p(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_p');
  late final ___stdio_common_vsprintf_p =
      ___stdio_common_vsprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
              _locale_t, va_list)>();

  int __stdio_common_vsscanf(
    int _Options,
    ffi.Pointer<ffi.Int8> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Int8> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Uint64,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              _locale_t,
              va_list)>>('__stdio_common_vsscanf');
  late final ___stdio_common_vsscanf = ___stdio_common_vsscanfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int8>, int, ffi.Pointer<ffi.Int8>,
          _locale_t, va_list)>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> _Directory,
    ffi.Pointer<ffi.Int8> _FilePrefix,
  ) {
    return _tempnam1(
      _Directory,
      _FilePrefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('tempnam');
  late final _tempnam1 = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int fcloseall() {
    return _fcloseall1();
  }

  late final _fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('fcloseall');
  late final _fcloseall1 = _fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Int8> _Format,
  ) {
    return _fdopen1(
      _FileHandle,
      _Format,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int32, ffi.Pointer<ffi.Int8>)>>('fdopen');
  late final _fdopen1 = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Int8>)>();

  int fgetchar() {
    return _fgetchar1();
  }

  late final _fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('fgetchar');
  late final _fgetchar1 = _fgetcharPtr.asFunction<int Function()>();

  int fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fileno1(
      _Stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno1 =
      _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int flushall() {
    return _flushall1();
  }

  late final _flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('flushall');
  late final _flushall1 = _flushallPtr.asFunction<int Function()>();

  int fputchar(
    int _Ch,
  ) {
    return _fputchar1(
      _Ch,
    );
  }

  late final _fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('fputchar');
  late final _fputchar1 = _fputcharPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getw1(
      _Stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw1 = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int _Ch,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putw1(
      _Ch,
      _Stream,
    );
  }

  late final _putwPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<FILE>)>>(
      'putw');
  late final _putw1 =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int rmtmp() {
    return _rmtmp1();
  }

  late final _rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('rmtmp');
  late final _rmtmp1 = _rmtmpPtr.asFunction<int Function()>();

  void luaL_checkversion_(
    ffi.Pointer<lua_State> L,
    double ver,
    int sz,
  ) {
    return _luaL_checkversion_(
      L,
      ver,
      sz,
    );
  }

  late final _luaL_checkversion_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, lua_Number,
              size_t)>>('luaL_checkversion_');
  late final _luaL_checkversion_ = _luaL_checkversion_Ptr
      .asFunction<void Function(ffi.Pointer<lua_State>, double, int)>();

  int luaL_getmetafield(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Int8> e,
  ) {
    return _luaL_getmetafield(
      L,
      obj,
      e,
    );
  }

  late final _luaL_getmetafieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_getmetafield');
  late final _luaL_getmetafield = _luaL_getmetafieldPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  int luaL_callmeta(
    ffi.Pointer<lua_State> L,
    int obj,
    ffi.Pointer<ffi.Int8> e,
  ) {
    return _luaL_callmeta(
      L,
      obj,
      e,
    );
  }

  late final _luaL_callmetaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_callmeta');
  late final _luaL_callmeta = _luaL_callmetaPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaL_tolstring(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<size_t> len,
  ) {
    return _luaL_tolstring(
      L,
      idx,
      len,
    );
  }

  late final _luaL_tolstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<size_t>)>>('luaL_tolstring');
  late final _luaL_tolstring = _luaL_tolstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<size_t>)>();

  int luaL_argerror(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> extramsg,
  ) {
    return _luaL_argerror(
      L,
      arg,
      extramsg,
    );
  }

  late final _luaL_argerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_argerror');
  late final _luaL_argerror = _luaL_argerrorPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  int luaL_typeerror(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_typeerror(
      L,
      arg,
      tname,
    );
  }

  late final _luaL_typeerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_typeerror');
  late final _luaL_typeerror = _luaL_typeerrorPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaL_checklstring(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<size_t> l,
  ) {
    return _luaL_checklstring(
      L,
      arg,
      l,
    );
  }

  late final _luaL_checklstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<size_t>)>>('luaL_checklstring');
  late final _luaL_checklstring = _luaL_checklstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<size_t>)>();

  ffi.Pointer<ffi.Int8> luaL_optlstring(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> def,
    ffi.Pointer<size_t> l,
  ) {
    return _luaL_optlstring(
      L,
      arg,
      def,
      l,
    );
  }

  late final _luaL_optlstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>>('luaL_optlstring');
  late final _luaL_optlstring = _luaL_optlstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>, int,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<size_t>)>();

  double luaL_checknumber(
    ffi.Pointer<lua_State> L,
    int arg,
  ) {
    return _luaL_checknumber(
      L,
      arg,
    );
  }

  late final _luaL_checknumberPtr = _lookup<
      ffi.NativeFunction<
          lua_Number Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_checknumber');
  late final _luaL_checknumber = _luaL_checknumberPtr
      .asFunction<double Function(ffi.Pointer<lua_State>, int)>();

  double luaL_optnumber(
    ffi.Pointer<lua_State> L,
    int arg,
    double def,
  ) {
    return _luaL_optnumber(
      L,
      arg,
      def,
    );
  }

  late final _luaL_optnumberPtr = _lookup<
      ffi.NativeFunction<
          lua_Number Function(ffi.Pointer<lua_State>, ffi.Int32,
              lua_Number)>>('luaL_optnumber');
  late final _luaL_optnumber = _luaL_optnumberPtr
      .asFunction<double Function(ffi.Pointer<lua_State>, int, double)>();

  int luaL_checkinteger(
    ffi.Pointer<lua_State> L,
    int arg,
  ) {
    return _luaL_checkinteger(
      L,
      arg,
    );
  }

  late final _luaL_checkintegerPtr = _lookup<
      ffi.NativeFunction<
          lua_Integer Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_checkinteger');
  late final _luaL_checkinteger = _luaL_checkintegerPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int luaL_optinteger(
    ffi.Pointer<lua_State> L,
    int arg,
    int def,
  ) {
    return _luaL_optinteger(
      L,
      arg,
      def,
    );
  }

  late final _luaL_optintegerPtr = _lookup<
      ffi.NativeFunction<
          lua_Integer Function(ffi.Pointer<lua_State>, ffi.Int32,
              lua_Integer)>>('luaL_optinteger');
  late final _luaL_optinteger = _luaL_optintegerPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int, int)>();

  void luaL_checkstack(
    ffi.Pointer<lua_State> L,
    int sz,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _luaL_checkstack(
      L,
      sz,
      msg,
    );
  }

  late final _luaL_checkstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_checkstack');
  late final _luaL_checkstack = _luaL_checkstackPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void luaL_checktype(
    ffi.Pointer<lua_State> L,
    int arg,
    int t,
  ) {
    return _luaL_checktype(
      L,
      arg,
      t,
    );
  }

  late final _luaL_checktypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('luaL_checktype');
  late final _luaL_checktype = _luaL_checktypePtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  void luaL_checkany(
    ffi.Pointer<lua_State> L,
    int arg,
  ) {
    return _luaL_checkany(
      L,
      arg,
    );
  }

  late final _luaL_checkanyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_checkany');
  late final _luaL_checkany = _luaL_checkanyPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int luaL_newmetatable(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_newmetatable(
      L,
      tname,
    );
  }

  late final _luaL_newmetatablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaL_newmetatable');
  late final _luaL_newmetatable = _luaL_newmetatablePtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  void luaL_setmetatable(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_setmetatable(
      L,
      tname,
    );
  }

  late final _luaL_setmetatablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaL_setmetatable');
  late final _luaL_setmetatable = _luaL_setmetatablePtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> luaL_testudata(
    ffi.Pointer<lua_State> L,
    int ud,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_testudata(
      L,
      ud,
      tname,
    );
  }

  late final _luaL_testudataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_testudata');
  late final _luaL_testudata = _luaL_testudataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> luaL_checkudata(
    ffi.Pointer<lua_State> L,
    int ud,
    ffi.Pointer<ffi.Int8> tname,
  ) {
    return _luaL_checkudata(
      L,
      ud,
      tname,
    );
  }

  late final _luaL_checkudataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_checkudata');
  late final _luaL_checkudata = _luaL_checkudataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void luaL_where(
    ffi.Pointer<lua_State> L,
    int lvl,
  ) {
    return _luaL_where(
      L,
      lvl,
    );
  }

  late final _luaL_wherePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_where');
  late final _luaL_where =
      _luaL_wherePtr.asFunction<void Function(ffi.Pointer<lua_State>, int)>();

  int luaL_error(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _luaL_error(
      L,
      fmt,
    );
  }

  late final _luaL_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>>('luaL_error');
  late final _luaL_error = _luaL_errorPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  int luaL_checkoption(
    ffi.Pointer<lua_State> L,
    int arg,
    ffi.Pointer<ffi.Int8> def,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> lst,
  ) {
    return _luaL_checkoption(
      L,
      arg,
      def,
      lst,
    );
  }

  late final _luaL_checkoptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>('luaL_checkoption');
  late final _luaL_checkoption = _luaL_checkoptionPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  int luaL_fileresult(
    ffi.Pointer<lua_State> L,
    int stat,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return _luaL_fileresult(
      L,
      stat,
      fname,
    );
  }

  late final _luaL_fileresultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_fileresult');
  late final _luaL_fileresult = _luaL_fileresultPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  int luaL_execresult(
    ffi.Pointer<lua_State> L,
    int stat,
  ) {
    return _luaL_execresult(
      L,
      stat,
    );
  }

  late final _luaL_execresultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_execresult');
  late final _luaL_execresult = _luaL_execresultPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int luaL_ref(
    ffi.Pointer<lua_State> L,
    int t,
  ) {
    return _luaL_ref(
      L,
      t,
    );
  }

  late final _luaL_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_ref');
  late final _luaL_ref =
      _luaL_refPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void luaL_unref(
    ffi.Pointer<lua_State> L,
    int t,
    int ref,
  ) {
    return _luaL_unref(
      L,
      t,
      ref,
    );
  }

  late final _luaL_unrefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Int32, ffi.Int32)>>('luaL_unref');
  late final _luaL_unref = _luaL_unrefPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, int, int)>();

  int luaL_loadfilex(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _luaL_loadfilex(
      L,
      filename,
      mode,
    );
  }

  late final _luaL_loadfilexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('luaL_loadfilex');
  late final _luaL_loadfilex = _luaL_loadfilexPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  int luaL_loadbufferx(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> buff,
    int sz,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> mode,
  ) {
    return _luaL_loadbufferx(
      L,
      buff,
      sz,
      name,
      mode,
    );
  }

  late final _luaL_loadbufferxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>,
              size_t,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('luaL_loadbufferx');
  late final _luaL_loadbufferx = _luaL_loadbufferxPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, int,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  int luaL_loadstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _luaL_loadstring(
      L,
      s,
    );
  }

  late final _luaL_loadstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaL_loadstring');
  late final _luaL_loadstring = _luaL_loadstringPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<lua_State> luaL_newstate() {
    return _luaL_newstate();
  }

  late final _luaL_newstatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<lua_State> Function()>>(
          'luaL_newstate');
  late final _luaL_newstate =
      _luaL_newstatePtr.asFunction<ffi.Pointer<lua_State> Function()>();

  int luaL_len(
    ffi.Pointer<lua_State> L,
    int idx,
  ) {
    return _luaL_len(
      L,
      idx,
    );
  }

  late final _luaL_lenPtr = _lookup<
      ffi.NativeFunction<
          lua_Integer Function(ffi.Pointer<lua_State>, ffi.Int32)>>('luaL_len');
  late final _luaL_len =
      _luaL_lenPtr.asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  void luaL_addgsub(
    ffi.Pointer<luaL_Buffer> b,
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Int8> r,
  ) {
    return _luaL_addgsub(
      b,
      s,
      p,
      r,
    );
  }

  late final _luaL_addgsubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('luaL_addgsub');
  late final _luaL_addgsub = _luaL_addgsubPtr.asFunction<
      void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaL_gsub(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<ffi.Int8> p,
    ffi.Pointer<ffi.Int8> r,
  ) {
    return _luaL_gsub(
      L,
      s,
      p,
      r,
    );
  }

  late final _luaL_gsubPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<ffi.Int8>)>>('luaL_gsub');
  late final _luaL_gsub = _luaL_gsubPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>,
          ffi.Pointer<ffi.Int8>)>();

  void luaL_setfuncs(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Reg> l,
    int nup,
  ) {
    return _luaL_setfuncs(
      L,
      l,
      nup,
    );
  }

  late final _luaL_setfuncsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<luaL_Reg>,
              ffi.Int32)>>('luaL_setfuncs');
  late final _luaL_setfuncs = _luaL_setfuncsPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<luaL_Reg>, int)>();

  int luaL_getsubtable(
    ffi.Pointer<lua_State> L,
    int idx,
    ffi.Pointer<ffi.Int8> fname,
  ) {
    return _luaL_getsubtable(
      L,
      idx,
      fname,
    );
  }

  late final _luaL_getsubtablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaL_getsubtable');
  late final _luaL_getsubtable = _luaL_getsubtablePtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<ffi.Int8>)>();

  void luaL_traceback(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> L1,
    ffi.Pointer<ffi.Int8> msg,
    int level,
  ) {
    return _luaL_traceback(
      L,
      L1,
      msg,
      level,
    );
  }

  late final _luaL_tracebackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>, ffi.Int32)>>('luaL_traceback');
  late final _luaL_traceback = _luaL_tracebackPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Int8>, int)>();

  void luaL_requiref(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> modname,
    lua_CFunction openf,
    int glb,
  ) {
    return _luaL_requiref(
      L,
      modname,
      openf,
      glb,
    );
  }

  late final _luaL_requirefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              lua_CFunction, ffi.Int32)>>('luaL_requiref');
  late final _luaL_requiref = _luaL_requirefPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, lua_CFunction, int)>();

  void luaL_buffinit(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_buffinit(
      L,
      B,
    );
  }

  late final _luaL_buffinitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<luaL_Buffer>)>>('luaL_buffinit');
  late final _luaL_buffinit = _luaL_buffinitPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<luaL_Buffer>)>();

  ffi.Pointer<ffi.Int8> luaL_prepbuffsize(
    ffi.Pointer<luaL_Buffer> B,
    int sz,
  ) {
    return _luaL_prepbuffsize(
      B,
      sz,
    );
  }

  late final _luaL_prepbuffsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<luaL_Buffer>, size_t)>>('luaL_prepbuffsize');
  late final _luaL_prepbuffsize = _luaL_prepbuffsizePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<luaL_Buffer>, int)>();

  void luaL_addlstring(
    ffi.Pointer<luaL_Buffer> B,
    ffi.Pointer<ffi.Int8> s,
    int l,
  ) {
    return _luaL_addlstring(
      B,
      s,
      l,
    );
  }

  late final _luaL_addlstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>,
              size_t)>>('luaL_addlstring');
  late final _luaL_addlstring = _luaL_addlstringPtr.asFunction<
      void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>, int)>();

  void luaL_addstring(
    ffi.Pointer<luaL_Buffer> B,
    ffi.Pointer<ffi.Int8> s,
  ) {
    return _luaL_addstring(
      B,
      s,
    );
  }

  late final _luaL_addstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<luaL_Buffer>,
              ffi.Pointer<ffi.Int8>)>>('luaL_addstring');
  late final _luaL_addstring = _luaL_addstringPtr.asFunction<
      void Function(ffi.Pointer<luaL_Buffer>, ffi.Pointer<ffi.Int8>)>();

  void luaL_addvalue(
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_addvalue(
      B,
    );
  }

  late final _luaL_addvaluePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<luaL_Buffer>)>>(
          'luaL_addvalue');
  late final _luaL_addvalue =
      _luaL_addvaluePtr.asFunction<void Function(ffi.Pointer<luaL_Buffer>)>();

  void luaL_pushresult(
    ffi.Pointer<luaL_Buffer> B,
  ) {
    return _luaL_pushresult(
      B,
    );
  }

  late final _luaL_pushresultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<luaL_Buffer>)>>(
          'luaL_pushresult');
  late final _luaL_pushresult =
      _luaL_pushresultPtr.asFunction<void Function(ffi.Pointer<luaL_Buffer>)>();

  void luaL_pushresultsize(
    ffi.Pointer<luaL_Buffer> B,
    int sz,
  ) {
    return _luaL_pushresultsize(
      B,
      sz,
    );
  }

  late final _luaL_pushresultsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<luaL_Buffer>, size_t)>>('luaL_pushresultsize');
  late final _luaL_pushresultsize = _luaL_pushresultsizePtr
      .asFunction<void Function(ffi.Pointer<luaL_Buffer>, int)>();

  ffi.Pointer<ffi.Int8> luaL_buffinitsize(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<luaL_Buffer> B,
    int sz,
  ) {
    return _luaL_buffinitsize(
      L,
      B,
      sz,
    );
  }

  late final _luaL_buffinitsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<luaL_Buffer>, size_t)>>('luaL_buffinitsize');
  late final _luaL_buffinitsize = _luaL_buffinitsizePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<luaL_Buffer>, int)>();

  int luaO_utf8esc(
    ffi.Pointer<ffi.Int8> buff,
    int x,
  ) {
    return _luaO_utf8esc(
      buff,
      x,
    );
  }

  late final _luaO_utf8escPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Int8>, ffi.Uint64)>>('luaO_utf8esc');
  late final _luaO_utf8esc =
      _luaO_utf8escPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  int luaO_ceillog2(
    int x,
  ) {
    return _luaO_ceillog2(
      x,
    );
  }

  late final _luaO_ceillog2Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint32)>>(
          'luaO_ceillog2');
  late final _luaO_ceillog2 = _luaO_ceillog2Ptr.asFunction<int Function(int)>();

  int luaO_rawarith(
    ffi.Pointer<lua_State> L,
    int op,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    ffi.Pointer<TValue> res,
  ) {
    return _luaO_rawarith(
      L,
      op,
      p1,
      p2,
      res,
    );
  }

  late final _luaO_rawarithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>,
              ffi.Int32,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>)>>('luaO_rawarith');
  late final _luaO_rawarith = _luaO_rawarithPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, int, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, ffi.Pointer<TValue>)>();

  void luaO_arith(
    ffi.Pointer<lua_State> L,
    int op,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    StkId res,
  ) {
    return _luaO_arith(
      L,
      op,
      p1,
      p2,
      res,
    );
  }

  late final _luaO_arithPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Int32,
              ffi.Pointer<TValue>, ffi.Pointer<TValue>, StkId)>>('luaO_arith');
  late final _luaO_arith = _luaO_arithPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, StkId)>();

  int luaO_str2num(
    ffi.Pointer<ffi.Int8> s,
    ffi.Pointer<TValue> o,
  ) {
    return _luaO_str2num(
      s,
      o,
    );
  }

  late final _luaO_str2numPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ffi.Int8>, ffi.Pointer<TValue>)>>('luaO_str2num');
  late final _luaO_str2num = _luaO_str2numPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<TValue>)>();

  int luaO_hexavalue(
    int c,
  ) {
    return _luaO_hexavalue(
      c,
    );
  }

  late final _luaO_hexavaluePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'luaO_hexavalue');
  late final _luaO_hexavalue =
      _luaO_hexavaluePtr.asFunction<int Function(int)>();

  void luaO_tostring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> obj,
  ) {
    return _luaO_tostring(
      L,
      obj,
    );
  }

  late final _luaO_tostringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<TValue>)>>('luaO_tostring');
  late final _luaO_tostring = _luaO_tostringPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>)>();

  ffi.Pointer<ffi.Int8> luaO_pushvfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
    va_list argp,
  ) {
    return _luaO_pushvfstring(
      L,
      fmt,
      argp,
    );
  }

  late final _luaO_pushvfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>, va_list)>>('luaO_pushvfstring');
  late final _luaO_pushvfstring = _luaO_pushvfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, va_list)>();

  ffi.Pointer<ffi.Int8> luaO_pushfstring(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _luaO_pushfstring(
      L,
      fmt,
    );
  }

  late final _luaO_pushfstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaO_pushfstring');
  late final _luaO_pushfstring = _luaO_pushfstringPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  void luaO_chunkid(
    ffi.Pointer<ffi.Int8> out,
    ffi.Pointer<ffi.Int8> source,
    int srclen,
  ) {
    return _luaO_chunkid(
      out,
      source,
      srclen,
    );
  }

  late final _luaO_chunkidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>,
              size_t)>>('luaO_chunkid');
  late final _luaO_chunkid = _luaO_chunkidPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _luaT_typenames_ =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('luaT_typenames_');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get luaT_typenames_ =>
      _luaT_typenames_.value;

  set luaT_typenames_(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _luaT_typenames_.value = value;

  ffi.Pointer<ffi.Int8> luaT_objtypename(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> o,
  ) {
    return _luaT_objtypename(
      L,
      o,
    );
  }

  late final _luaT_objtypenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<TValue>)>>('luaT_objtypename');
  late final _luaT_objtypename = _luaT_objtypenamePtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>)>();

  ffi.Pointer<TValue> luaT_gettm(
    ffi.Pointer<Table> events,
    int event,
    ffi.Pointer<TString> ename,
  ) {
    return _luaT_gettm(
      events,
      event,
      ename,
    );
  }

  late final _luaT_gettmPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TValue> Function(ffi.Pointer<Table>, ffi.Int32,
              ffi.Pointer<TString>)>>('luaT_gettm');
  late final _luaT_gettm = _luaT_gettmPtr.asFunction<
      ffi.Pointer<TValue> Function(
          ffi.Pointer<Table>, int, ffi.Pointer<TString>)>();

  ffi.Pointer<TValue> luaT_gettmbyobj(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> o,
    int event,
  ) {
    return _luaT_gettmbyobj(
      L,
      o,
      event,
    );
  }

  late final _luaT_gettmbyobjPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TValue> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<TValue>, ffi.Int32)>>('luaT_gettmbyobj');
  late final _luaT_gettmbyobj = _luaT_gettmbyobjPtr.asFunction<
      ffi.Pointer<TValue> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>, int)>();

  void luaT_init(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaT_init(
      L,
    );
  }

  late final _luaT_initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaT_init');
  late final _luaT_init =
      _luaT_initPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaT_callTM(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> f,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    ffi.Pointer<TValue> p3,
  ) {
    return _luaT_callTM(
      L,
      f,
      p1,
      p2,
      p3,
    );
  }

  late final _luaT_callTMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>)>>('luaT_callTM');
  late final _luaT_callTM = _luaT_callTMPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, ffi.Pointer<TValue>, ffi.Pointer<TValue>)>();

  void luaT_callTMres(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> f,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    StkId p3,
  ) {
    return _luaT_callTMres(
      L,
      f,
      p1,
      p2,
      p3,
    );
  }

  late final _luaT_callTMresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>,
              StkId)>>('luaT_callTMres');
  late final _luaT_callTMres = _luaT_callTMresPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, ffi.Pointer<TValue>, StkId)>();

  void luaT_trybinTM(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    StkId res,
    int event,
  ) {
    return _luaT_trybinTM(
      L,
      p1,
      p2,
      res,
      event,
    );
  }

  late final _luaT_trybinTMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<TValue>, StkId, ffi.Int32)>>('luaT_trybinTM');
  late final _luaT_trybinTM = _luaT_trybinTMPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, StkId, int)>();

  void luaT_tryconcatTM(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaT_tryconcatTM(
      L,
    );
  }

  late final _luaT_tryconcatTMPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaT_tryconcatTM');
  late final _luaT_tryconcatTM =
      _luaT_tryconcatTMPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaT_trybinassocTM(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    int inv,
    StkId res,
    int event,
  ) {
    return _luaT_trybinassocTM(
      L,
      p1,
      p2,
      inv,
      res,
      event,
    );
  }

  late final _luaT_trybinassocTMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<TValue>,
              ffi.Pointer<TValue>,
              ffi.Int32,
              StkId,
              ffi.Int32)>>('luaT_trybinassocTM');
  late final _luaT_trybinassocTM = _luaT_trybinassocTMPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, int, StkId, int)>();

  void luaT_trybiniTM(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    int i2,
    int inv,
    StkId res,
    int event,
  ) {
    return _luaT_trybiniTM(
      L,
      p1,
      i2,
      inv,
      res,
      event,
    );
  }

  late final _luaT_trybiniTMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              lua_Integer, ffi.Int32, StkId, ffi.Int32)>>('luaT_trybiniTM');
  late final _luaT_trybiniTM = _luaT_trybiniTMPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>, int, int, StkId, int)>();

  int luaT_callorderTM(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    int event,
  ) {
    return _luaT_callorderTM(
      L,
      p1,
      p2,
      event,
    );
  }

  late final _luaT_callorderTMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<TValue>, ffi.Int32)>>('luaT_callorderTM');
  late final _luaT_callorderTM = _luaT_callorderTMPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, int)>();

  int luaT_callorderiTM(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    int v2,
    int inv,
    int isfloat,
    int event,
  ) {
    return _luaT_callorderiTM(
      L,
      p1,
      v2,
      inv,
      isfloat,
      event,
    );
  }

  late final _luaT_callorderiTMPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<TValue>,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32,
              ffi.Int32)>>('luaT_callorderiTM');
  late final _luaT_callorderiTM = _luaT_callorderiTMPtr.asFunction<
      int Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>, int, int, int, int)>();

  void luaT_adjustvarargs(
    ffi.Pointer<lua_State> L,
    int nfixparams,
    ffi.Pointer<CallInfo> ci,
    ffi.Pointer<Proto> p,
  ) {
    return _luaT_adjustvarargs(
      L,
      nfixparams,
      ci,
      p,
    );
  }

  late final _luaT_adjustvarargsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>,
              ffi.Int32,
              ffi.Pointer<CallInfo>,
              ffi.Pointer<Proto>)>>('luaT_adjustvarargs');
  late final _luaT_adjustvarargs = _luaT_adjustvarargsPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, int, ffi.Pointer<CallInfo>,
          ffi.Pointer<Proto>)>();

  void luaT_getvarargs(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<CallInfo> ci,
    StkId where,
    int wanted,
  ) {
    return _luaT_getvarargs(
      L,
      ci,
      where,
      wanted,
    );
  }

  late final _luaT_getvarargsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<CallInfo>,
              StkId, ffi.Int32)>>('luaT_getvarargs');
  late final _luaT_getvarargs = _luaT_getvarargsPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, ffi.Pointer<CallInfo>, StkId, int)>();

  void luaM_toobig(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaM_toobig(
      L,
    );
  }

  late final _luaM_toobigPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaM_toobig');
  late final _luaM_toobig =
      _luaM_toobigPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  ffi.Pointer<ffi.Void> luaM_realloc_(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> block,
    int oldsize,
    int size,
  ) {
    return _luaM_realloc_(
      L,
      block,
      oldsize,
      size,
    );
  }

  late final _luaM_realloc_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('luaM_realloc_');
  late final _luaM_realloc_ = _luaM_realloc_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> luaM_saferealloc_(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> block,
    int oldsize,
    int size,
  ) {
    return _luaM_saferealloc_(
      L,
      block,
      oldsize,
      size,
    );
  }

  late final _luaM_saferealloc_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>, size_t, size_t)>>('luaM_saferealloc_');
  late final _luaM_saferealloc_ = _luaM_saferealloc_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>, int, int)>();

  void luaM_free_(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> block,
    int osize,
  ) {
    return _luaM_free_(
      L,
      block,
      osize,
    );
  }

  late final _luaM_free_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>,
              size_t)>>('luaM_free_');
  late final _luaM_free_ = _luaM_free_Ptr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> luaM_growaux_(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> block,
    int nelems,
    ffi.Pointer<ffi.Int32> size,
    int size_elem,
    int limit,
    ffi.Pointer<ffi.Int8> what,
  ) {
    return _luaM_growaux_(
      L,
      block,
      nelems,
      size,
      size_elem,
      limit,
      what,
    );
  }

  late final _luaM_growaux_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>,
              ffi.Int32,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Int8>)>>('luaM_growaux_');
  late final _luaM_growaux_ = _luaM_growaux_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<ffi.Int32>,
          int,
          int,
          ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Void> luaM_shrinkvector_(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Void> block,
    ffi.Pointer<ffi.Int32> nelem,
    int final_n,
    int size_elem,
  ) {
    return _luaM_shrinkvector_(
      L,
      block,
      nelem,
      final_n,
      size_elem,
    );
  }

  late final _luaM_shrinkvector_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int32>,
              ffi.Int32,
              ffi.Int32)>>('luaM_shrinkvector_');
  late final _luaM_shrinkvector_ = _luaM_shrinkvector_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int32>, int, int)>();

  ffi.Pointer<ffi.Void> luaM_malloc_(
    ffi.Pointer<lua_State> L,
    int size,
    int tag,
  ) {
    return _luaM_malloc_(
      L,
      size,
      tag,
    );
  }

  late final _luaM_malloc_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<lua_State>, size_t, ffi.Int32)>>('luaM_malloc_');
  late final _luaM_malloc_ = _luaM_malloc_Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<lua_State>, int, int)>();

  void luaZ_init(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ZIO> z,
    lua_Reader reader,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _luaZ_init(
      L,
      z,
      reader,
      data,
    );
  }

  late final _luaZ_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ZIO>,
              lua_Reader, ffi.Pointer<ffi.Void>)>>('luaZ_init');
  late final _luaZ_init = _luaZ_initPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ZIO>, lua_Reader,
          ffi.Pointer<ffi.Void>)>();

  int luaZ_read(
    ffi.Pointer<ZIO> z,
    ffi.Pointer<ffi.Void> b,
    int n,
  ) {
    return _luaZ_read(
      z,
      b,
      n,
    );
  }

  late final _luaZ_readPtr = _lookup<
      ffi.NativeFunction<
          size_t Function(
              ffi.Pointer<ZIO>, ffi.Pointer<ffi.Void>, size_t)>>('luaZ_read');
  late final _luaZ_read = _luaZ_readPtr
      .asFunction<int Function(ffi.Pointer<ZIO>, ffi.Pointer<ffi.Void>, int)>();

  int luaZ_fill(
    ffi.Pointer<ZIO> z,
  ) {
    return _luaZ_fill(
      z,
    );
  }

  late final _luaZ_fillPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ZIO>)>>(
          'luaZ_fill');
  late final _luaZ_fill =
      _luaZ_fillPtr.asFunction<int Function(ffi.Pointer<ZIO>)>();

  ffi.Pointer<ffi.Pointer<ffi.Void>> __pxcptinfoptrs() {
    return ___pxcptinfoptrs();
  }

  late final ___pxcptinfoptrsPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Void>> Function()>>(
      '__pxcptinfoptrs');
  late final ___pxcptinfoptrs = ___pxcptinfoptrsPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Void>> Function()>();

  _crt_signal_t signal(
    int _Signal,
    _crt_signal_t _Function,
  ) {
    return _signal(
      _Signal,
      _Function,
    );
  }

  late final _signalPtr = _lookup<
          ffi.NativeFunction<_crt_signal_t Function(ffi.Int32, _crt_signal_t)>>(
      'signal');
  late final _signal =
      _signalPtr.asFunction<_crt_signal_t Function(int, _crt_signal_t)>();

  int raise(
    int _Signal,
  ) {
    return _raise(
      _Signal,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  void luaE_setdebt(
    ffi.Pointer<global_State> g,
    int debt,
  ) {
    return _luaE_setdebt(
      g,
      debt,
    );
  }

  late final _luaE_setdebtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<global_State>, l_mem)>>('luaE_setdebt');
  late final _luaE_setdebt = _luaE_setdebtPtr
      .asFunction<void Function(ffi.Pointer<global_State>, int)>();

  void luaE_freethread(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<lua_State> L1,
  ) {
    return _luaE_freethread(
      L,
      L1,
    );
  }

  late final _luaE_freethreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<lua_State>)>>('luaE_freethread');
  late final _luaE_freethread = _luaE_freethreadPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_State>)>();

  ffi.Pointer<CallInfo> luaE_extendCI(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaE_extendCI(
      L,
    );
  }

  late final _luaE_extendCIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CallInfo> Function(
              ffi.Pointer<lua_State>)>>('luaE_extendCI');
  late final _luaE_extendCI = _luaE_extendCIPtr
      .asFunction<ffi.Pointer<CallInfo> Function(ffi.Pointer<lua_State>)>();

  void luaE_freeCI(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaE_freeCI(
      L,
    );
  }

  late final _luaE_freeCIPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaE_freeCI');
  late final _luaE_freeCI =
      _luaE_freeCIPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaE_shrinkCI(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaE_shrinkCI(
      L,
    );
  }

  late final _luaE_shrinkCIPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaE_shrinkCI');
  late final _luaE_shrinkCI =
      _luaE_shrinkCIPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaE_checkcstack(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaE_checkcstack(
      L,
    );
  }

  late final _luaE_checkcstackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaE_checkcstack');
  late final _luaE_checkcstack =
      _luaE_checkcstackPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaE_incCstack(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaE_incCstack(
      L,
    );
  }

  late final _luaE_incCstackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaE_incCstack');
  late final _luaE_incCstack =
      _luaE_incCstackPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  void luaE_warning(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> msg,
    int tocont,
  ) {
    return _luaE_warning(
      L,
      msg,
      tocont,
    );
  }

  late final _luaE_warningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>,
              ffi.Int32)>>('luaE_warning');
  late final _luaE_warning = _luaE_warningPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>, int)>();

  void luaE_warnerror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> where,
  ) {
    return _luaE_warnerror(
      L,
      where,
    );
  }

  late final _luaE_warnerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>)>>('luaE_warnerror');
  late final _luaE_warnerror = _luaE_warnerrorPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  int luaE_resetthread(
    ffi.Pointer<lua_State> L,
    int status,
  ) {
    return _luaE_resetthread(
      L,
      status,
    );
  }

  late final _luaE_resetthreadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<lua_State>, ffi.Int32)>>('luaE_resetthread');
  late final _luaE_resetthread = _luaE_resetthreadPtr
      .asFunction<int Function(ffi.Pointer<lua_State>, int)>();

  int luaG_getfuncline(
    ffi.Pointer<Proto> f,
    int pc,
  ) {
    return _luaG_getfuncline(
      f,
      pc,
    );
  }

  late final _luaG_getfunclinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Proto>, ffi.Int32)>>('luaG_getfuncline');
  late final _luaG_getfuncline =
      _luaG_getfunclinePtr.asFunction<int Function(ffi.Pointer<Proto>, int)>();

  ffi.Pointer<ffi.Int8> luaG_findlocal(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<CallInfo> ci,
    int n,
    ffi.Pointer<StkId> pos,
  ) {
    return _luaG_findlocal(
      L,
      ci,
      n,
      pos,
    );
  }

  late final _luaG_findlocalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<CallInfo>,
              ffi.Int32,
              ffi.Pointer<StkId>)>>('luaG_findlocal');
  late final _luaG_findlocal = _luaG_findlocalPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
          ffi.Pointer<CallInfo>, int, ffi.Pointer<StkId>)>();

  void luaG_typeerror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> o,
    ffi.Pointer<ffi.Int8> opname,
  ) {
    return _luaG_typeerror(
      L,
      o,
      opname,
    );
  }

  late final _luaG_typeerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<ffi.Int8>)>>('luaG_typeerror');
  late final _luaG_typeerror = _luaG_typeerrorPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<ffi.Int8>)>();

  void luaG_callerror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> o,
  ) {
    return _luaG_callerror(
      L,
      o,
    );
  }

  late final _luaG_callerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<TValue>)>>('luaG_callerror');
  late final _luaG_callerror = _luaG_callerrorPtr
      .asFunction<void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>)>();

  void luaG_forerror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> o,
    ffi.Pointer<ffi.Int8> what,
  ) {
    return _luaG_forerror(
      L,
      o,
      what,
    );
  }

  late final _luaG_forerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<ffi.Int8>)>>('luaG_forerror');
  late final _luaG_forerror = _luaG_forerrorPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<ffi.Int8>)>();

  void luaG_concaterror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
  ) {
    return _luaG_concaterror(
      L,
      p1,
      p2,
    );
  }

  late final _luaG_concaterrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<TValue>)>>('luaG_concaterror');
  late final _luaG_concaterror = _luaG_concaterrorPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>, ffi.Pointer<TValue>)>();

  void luaG_opinterror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
    ffi.Pointer<ffi.Int8> msg,
  ) {
    return _luaG_opinterror(
      L,
      p1,
      p2,
      msg,
    );
  }

  late final _luaG_opinterrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<TValue>, ffi.Pointer<ffi.Int8>)>>('luaG_opinterror');
  late final _luaG_opinterror = _luaG_opinterrorPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
          ffi.Pointer<TValue>, ffi.Pointer<ffi.Int8>)>();

  void luaG_tointerror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
  ) {
    return _luaG_tointerror(
      L,
      p1,
      p2,
    );
  }

  late final _luaG_tointerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<TValue>)>>('luaG_tointerror');
  late final _luaG_tointerror = _luaG_tointerrorPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>, ffi.Pointer<TValue>)>();

  void luaG_ordererror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<TValue> p1,
    ffi.Pointer<TValue> p2,
  ) {
    return _luaG_ordererror(
      L,
      p1,
      p2,
    );
  }

  late final _luaG_ordererrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<TValue>,
              ffi.Pointer<TValue>)>>('luaG_ordererror');
  late final _luaG_ordererror = _luaG_ordererrorPtr.asFunction<
      void Function(
          ffi.Pointer<lua_State>, ffi.Pointer<TValue>, ffi.Pointer<TValue>)>();

  void luaG_runerror(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> fmt,
  ) {
    return _luaG_runerror(
      L,
      fmt,
    );
  }

  late final _luaG_runerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>>('luaG_runerror');
  late final _luaG_runerror = _luaG_runerrorPtr.asFunction<
      void Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Int8> luaG_addinfo(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ffi.Int8> msg,
    ffi.Pointer<TString> src,
    int line,
  ) {
    return _luaG_addinfo(
      L,
      msg,
      src,
      line,
    );
  }

  late final _luaG_addinfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<lua_State>,
              ffi.Pointer<ffi.Int8>,
              ffi.Pointer<TString>,
              ffi.Int32)>>('luaG_addinfo');
  late final _luaG_addinfo = _luaG_addinfoPtr.asFunction<
      ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
          ffi.Pointer<ffi.Int8>, ffi.Pointer<TString>, int)>();

  void luaG_errormsg(
    ffi.Pointer<lua_State> L,
  ) {
    return _luaG_errormsg(
      L,
    );
  }

  late final _luaG_errormsgPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<lua_State>)>>(
          'luaG_errormsg');
  late final _luaG_errormsg =
      _luaG_errormsgPtr.asFunction<void Function(ffi.Pointer<lua_State>)>();

  int luaG_traceexec(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<Instruction> pc,
  ) {
    return _luaG_traceexec(
      L,
      pc,
    );
  }

  late final _luaG_traceexecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>,
              ffi.Pointer<Instruction>)>>('luaG_traceexec');
  late final _luaG_traceexec = _luaG_traceexecPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<Instruction>)>();

  late final ffi.Pointer<ffi.Pointer<lu_byte>> _luaP_opmodes =
      _lookup<ffi.Pointer<lu_byte>>('luaP_opmodes');

  ffi.Pointer<lu_byte> get luaP_opmodes => _luaP_opmodes.value;

  set luaP_opmodes(ffi.Pointer<lu_byte> value) => _luaP_opmodes.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _opnames =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('opnames');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get opnames => _opnames.value;

  set opnames(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _opnames.value = value;

  ffi.Pointer<LClosure> luaU_undump(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<ZIO> Z,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _luaU_undump(
      L,
      Z,
      name,
    );
  }

  late final _luaU_undumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LClosure> Function(ffi.Pointer<lua_State>,
              ffi.Pointer<ZIO>, ffi.Pointer<ffi.Int8>)>>('luaU_undump');
  late final _luaU_undump = _luaU_undumpPtr.asFunction<
      ffi.Pointer<LClosure> Function(
          ffi.Pointer<lua_State>, ffi.Pointer<ZIO>, ffi.Pointer<ffi.Int8>)>();

  int luaU_dump(
    ffi.Pointer<lua_State> L,
    ffi.Pointer<Proto> f,
    lua_Writer w,
    ffi.Pointer<ffi.Void> data,
    int strip,
  ) {
    return _luaU_dump(
      L,
      f,
      w,
      data,
      strip,
    );
  }

  late final _luaU_dumpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<Proto>,
              lua_Writer, ffi.Pointer<ffi.Void>, ffi.Int32)>>('luaU_dump');
  late final _luaU_dump = _luaU_dumpPtr.asFunction<
      int Function(ffi.Pointer<lua_State>, ffi.Pointer<Proto>, lua_Writer,
          ffi.Pointer<ffi.Void>, int)>();
}

typedef va_list = ffi.Pointer<ffi.Int8>;
typedef uintptr_t = ffi.Uint64;
typedef wchar_t = ffi.Uint16;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  external int _locale_mb_cur_max;

  @ffi.Uint32()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  external int _Wchar;

  @ffi.Uint16()
  external int _Byte;

  @ffi.Uint16()
  external int _State;
}

typedef errno_t = ffi.Int32;

class lua_State extends ffi.Opaque {}

typedef lua_Alloc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, size_t, size_t)>>;
typedef size_t = ffi.Uint64;
typedef lua_CFunction = ffi
    .Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<lua_State>)>>;
typedef lua_Number = ffi.Double;
typedef lua_Integer = ffi.Int64;
typedef lua_Unsigned = ffi.Uint64;
typedef lua_KContext = ptrdiff_t;
typedef ptrdiff_t = ffi.Int64;
typedef lua_KFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Int32, lua_KContext)>>;
typedef lua_Reader = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Int8> Function(ffi.Pointer<lua_State>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<size_t>)>>;
typedef lua_Writer = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<lua_State>, ffi.Pointer<ffi.Void>,
            size_t, ffi.Pointer<ffi.Void>)>>;
typedef lua_WarnFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int8>, ffi.Int32)>>;

class lua_Debug extends ffi.Struct {
  @ffi.Int32()
  external int event;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> namewhat;

  external ffi.Pointer<ffi.Int8> what;

  external ffi.Pointer<ffi.Int8> source;

  @size_t()
  external int srclen;

  @ffi.Int32()
  external int currentline;

  @ffi.Int32()
  external int linedefined;

  @ffi.Int32()
  external int lastlinedefined;

  @ffi.Uint8()
  external int nups;

  @ffi.Uint8()
  external int nparams;

  @ffi.Int8()
  external int isvararg;

  @ffi.Int8()
  external int istailcall;

  @ffi.Uint16()
  external int ftransfer;

  @ffi.Uint16()
  external int ntransfer;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Int8> short_src;

  external ffi.Pointer<CallInfo> i_ci;
}

class CallInfo extends ffi.Opaque {}

typedef lua_Hook = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<lua_State>, ffi.Pointer<lua_Debug>)>>;

class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

typedef FILE = _iobuf;
typedef wint_t = ffi.Uint16;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef rsize_t = size_t;
typedef fpos_t = ffi.Int64;

class luaL_Buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> b;

  @size_t()
  external int size;

  @size_t()
  external int n;

  external ffi.Pointer<lua_State> L;

  external UnnamedUnion1 init;
}

class UnnamedUnion1 extends ffi.Union {
  @lua_Number()
  external double n;

  @ffi.Double()
  external double u;

  external ffi.Pointer<ffi.Void> s;

  @lua_Integer()
  external int i;

  @ffi.Int64()
  external int l;

  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Int8> b;
}

class luaL_Reg extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external lua_CFunction func;
}

class luaL_Stream extends ffi.Struct {
  external ffi.Pointer<FILE> f;

  external lua_CFunction closef;
}

class Value extends ffi.Union {
  external ffi.Pointer<GCObject> gc;

  external ffi.Pointer<ffi.Void> p;

  external lua_CFunction f;

  @lua_Integer()
  external int i;

  @lua_Number()
  external double n;
}

class GCObject extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;
}

typedef lu_byte = ffi.Uint8;

class TValue extends ffi.Struct {
  external Value value_;

  @lu_byte()
  external int tt_;
}

class StackValue extends ffi.Union {
  external TValue val;

  external UnnamedStruct1 tbclist;
}

class UnnamedStruct1 extends ffi.Struct {
  external Value value_;

  @lu_byte()
  external int tt_;

  @ffi.Uint16()
  external int delta;
}

class TString extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int extra;

  @lu_byte()
  external int shrlen;

  @ffi.Uint32()
  external int hash;

  external UnnamedUnion2 u;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> contents;
}

class UnnamedUnion2 extends ffi.Union {
  @size_t()
  external int lnglen;

  external ffi.Pointer<TString> hnext;
}

class UValue extends ffi.Union {
  external TValue uv;

  @lua_Number()
  external double n;

  @ffi.Double()
  external double u;

  external ffi.Pointer<ffi.Void> s;

  @lua_Integer()
  external int i;

  @ffi.Int64()
  external int l;
}

class Udata extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @ffi.Uint16()
  external int nuvalue;

  @size_t()
  external int len;

  external ffi.Pointer<Table> metatable;

  external ffi.Pointer<GCObject> gclist;

  @ffi.Array.multi([1])
  external ffi.Array<UValue> uv;
}

class Table extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int flags;

  @lu_byte()
  external int lsizenode;

  @ffi.Uint32()
  external int alimit;

  external ffi.Pointer<TValue> array;

  external ffi.Pointer<Node> node;

  external ffi.Pointer<Node> lastfree;

  external ffi.Pointer<Table> metatable;

  external ffi.Pointer<GCObject> gclist;
}

class Node extends ffi.Union {
  external NodeKey u;

  external TValue i_val;
}

class NodeKey extends ffi.Struct {
  external Value value_;

  @lu_byte()
  external int tt_;

  @lu_byte()
  external int key_tt;

  @ffi.Int32()
  external int next;

  external Value key_val;
}

class Udata0 extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @ffi.Uint16()
  external int nuvalue;

  @size_t()
  external int len;

  external ffi.Pointer<Table> metatable;

  external UnnamedUnion3 bindata;
}

class UnnamedUnion3 extends ffi.Union {
  @lua_Number()
  external double n;

  @ffi.Double()
  external double u;

  external ffi.Pointer<ffi.Void> s;

  @lua_Integer()
  external int i;

  @ffi.Int64()
  external int l;
}

class Upvaldesc extends ffi.Struct {
  external ffi.Pointer<TString> name;

  @lu_byte()
  external int instack;

  @lu_byte()
  external int idx;

  @lu_byte()
  external int kind;
}

class LocVar extends ffi.Struct {
  external ffi.Pointer<TString> varname;

  @ffi.Int32()
  external int startpc;

  @ffi.Int32()
  external int endpc;
}

class AbsLineInfo extends ffi.Struct {
  @ffi.Int32()
  external int pc;

  @ffi.Int32()
  external int line;
}

class Proto extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int numparams;

  @lu_byte()
  external int is_vararg;

  @lu_byte()
  external int maxstacksize;

  @ffi.Int32()
  external int sizeupvalues;

  @ffi.Int32()
  external int sizek;

  @ffi.Int32()
  external int sizecode;

  @ffi.Int32()
  external int sizelineinfo;

  @ffi.Int32()
  external int sizep;

  @ffi.Int32()
  external int sizelocvars;

  @ffi.Int32()
  external int sizeabslineinfo;

  @ffi.Int32()
  external int linedefined;

  @ffi.Int32()
  external int lastlinedefined;

  external ffi.Pointer<TValue> k;

  external ffi.Pointer<Instruction> code;

  external ffi.Pointer<ffi.Pointer<Proto>> p;

  external ffi.Pointer<Upvaldesc> upvalues;

  external ffi.Pointer<ls_byte> lineinfo;

  external ffi.Pointer<AbsLineInfo> abslineinfo;

  external ffi.Pointer<LocVar> locvars;

  external ffi.Pointer<TString> source;

  external ffi.Pointer<GCObject> gclist;
}

typedef Instruction = l_uint32;
typedef l_uint32 = ffi.Uint32;
typedef ls_byte = ffi.Int8;

class UpVal extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int tbc;

  external ffi.Pointer<TValue> v;

  external UnnamedUnion4 u;
}

class UnnamedUnion4 extends ffi.Union {
  external UnnamedStruct2 open;

  external TValue value;
}

class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<UpVal> next;

  external ffi.Pointer<ffi.Pointer<UpVal>> previous;
}

class CClosure extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int nupvalues;

  external ffi.Pointer<GCObject> gclist;

  external lua_CFunction f;

  @ffi.Array.multi([1])
  external ffi.Array<TValue> upvalue;
}

class LClosure extends ffi.Struct {
  external ffi.Pointer<GCObject> next;

  @lu_byte()
  external int tt;

  @lu_byte()
  external int marked;

  @lu_byte()
  external int nupvalues;

  external ffi.Pointer<GCObject> gclist;

  external ffi.Pointer<Proto> p;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Pointer<UpVal>> upvals;
}

class Closure extends ffi.Union {
  external CClosure c;

  external LClosure l;
}

typedef StkId = ffi.Pointer<StackValue>;

abstract class TMS {
  static const int TM_INDEX = 0;
  static const int TM_NEWINDEX = 1;
  static const int TM_GC = 2;
  static const int TM_MODE = 3;
  static const int TM_LEN = 4;
  static const int TM_EQ = 5;
  static const int TM_ADD = 6;
  static const int TM_SUB = 7;
  static const int TM_MUL = 8;
  static const int TM_MOD = 9;
  static const int TM_POW = 10;
  static const int TM_DIV = 11;
  static const int TM_IDIV = 12;
  static const int TM_BAND = 13;
  static const int TM_BOR = 14;
  static const int TM_BXOR = 15;
  static const int TM_SHL = 16;
  static const int TM_SHR = 17;
  static const int TM_UNM = 18;
  static const int TM_BNOT = 19;
  static const int TM_LT = 20;
  static const int TM_LE = 21;
  static const int TM_CONCAT = 22;
  static const int TM_CALL = 23;
  static const int TM_CLOSE = 24;
  static const int TM_N = 25;
}

class Zio extends ffi.Struct {
  @size_t()
  external int n;

  external ffi.Pointer<ffi.Int8> p;

  external lua_Reader reader;

  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<lua_State> L;
}

class Mbuffer extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> buffer;

  @size_t()
  external int n;

  @size_t()
  external int buffsize;
}

typedef ZIO = Zio;

class lua_longjmp extends ffi.Opaque {}

typedef _crt_signal_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>;

class stringtable extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<TString>> hash;

  @ffi.Int32()
  external int nuse;

  @ffi.Int32()
  external int size;
}

class global_State extends ffi.Struct {
  external lua_Alloc frealloc;

  external ffi.Pointer<ffi.Void> ud;

  @l_mem()
  external int totalbytes;

  @l_mem()
  external int GCdebt;

  @lu_mem()
  external int GCestimate;

  @lu_mem()
  external int lastatomic;

  external stringtable strt;

  external TValue l_registry;

  external TValue nilvalue;

  @ffi.Uint32()
  external int seed;

  @lu_byte()
  external int currentwhite;

  @lu_byte()
  external int gcstate;

  @lu_byte()
  external int gckind;

  @lu_byte()
  external int gcstopem;

  @lu_byte()
  external int genminormul;

  @lu_byte()
  external int genmajormul;

  @lu_byte()
  external int gcrunning;

  @lu_byte()
  external int gcemergency;

  @lu_byte()
  external int gcpause;

  @lu_byte()
  external int gcstepmul;

  @lu_byte()
  external int gcstepsize;

  external ffi.Pointer<GCObject> allgc;

  external ffi.Pointer<ffi.Pointer<GCObject>> sweepgc;

  external ffi.Pointer<GCObject> finobj;

  external ffi.Pointer<GCObject> gray;

  external ffi.Pointer<GCObject> grayagain;

  external ffi.Pointer<GCObject> weak;

  external ffi.Pointer<GCObject> ephemeron;

  external ffi.Pointer<GCObject> allweak;

  external ffi.Pointer<GCObject> tobefnz;

  external ffi.Pointer<GCObject> fixedgc;

  external ffi.Pointer<GCObject> survival;

  external ffi.Pointer<GCObject> old1;

  external ffi.Pointer<GCObject> reallyold;

  external ffi.Pointer<GCObject> firstold1;

  external ffi.Pointer<GCObject> finobjsur;

  external ffi.Pointer<GCObject> finobjold1;

  external ffi.Pointer<GCObject> finobjrold;

  external ffi.Pointer<lua_State> twups;

  external lua_CFunction panic;

  external ffi.Pointer<lua_State> mainthread;

  external ffi.Pointer<TString> memerrmsg;

  @ffi.Array.multi([25])
  external ffi.Array<ffi.Pointer<TString>> tmname;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Pointer<Table>> mt;

  @ffi.Array.multi([53, 2])
  external ffi.Array<ffi.Array<ffi.Pointer<TString>>> strcache;

  external lua_WarnFunction warnf;

  external ffi.Pointer<ffi.Void> ud_warn;
}

typedef l_mem = ptrdiff_t;
typedef lu_mem = size_t;

class GCUnion extends ffi.Opaque {}

abstract class OpMode {
  static const int iABC = 0;
  static const int iABx = 1;
  static const int iAsBx = 2;
  static const int iAx = 3;
  static const int isJ = 4;
}

abstract class OpCode {
  static const int OP_MOVE = 0;
  static const int OP_LOADI = 1;
  static const int OP_LOADF = 2;
  static const int OP_LOADK = 3;
  static const int OP_LOADKX = 4;
  static const int OP_LOADFALSE = 5;
  static const int OP_LFALSESKIP = 6;
  static const int OP_LOADTRUE = 7;
  static const int OP_LOADNIL = 8;
  static const int OP_GETUPVAL = 9;
  static const int OP_SETUPVAL = 10;
  static const int OP_GETTABUP = 11;
  static const int OP_GETTABLE = 12;
  static const int OP_GETI = 13;
  static const int OP_GETFIELD = 14;
  static const int OP_SETTABUP = 15;
  static const int OP_SETTABLE = 16;
  static const int OP_SETI = 17;
  static const int OP_SETFIELD = 18;
  static const int OP_NEWTABLE = 19;
  static const int OP_SELF = 20;
  static const int OP_ADDI = 21;
  static const int OP_ADDK = 22;
  static const int OP_SUBK = 23;
  static const int OP_MULK = 24;
  static const int OP_MODK = 25;
  static const int OP_POWK = 26;
  static const int OP_DIVK = 27;
  static const int OP_IDIVK = 28;
  static const int OP_BANDK = 29;
  static const int OP_BORK = 30;
  static const int OP_BXORK = 31;
  static const int OP_SHRI = 32;
  static const int OP_SHLI = 33;
  static const int OP_ADD = 34;
  static const int OP_SUB = 35;
  static const int OP_MUL = 36;
  static const int OP_MOD = 37;
  static const int OP_POW = 38;
  static const int OP_DIV = 39;
  static const int OP_IDIV = 40;
  static const int OP_BAND = 41;
  static const int OP_BOR = 42;
  static const int OP_BXOR = 43;
  static const int OP_SHL = 44;
  static const int OP_SHR = 45;
  static const int OP_MMBIN = 46;
  static const int OP_MMBINI = 47;
  static const int OP_MMBINK = 48;
  static const int OP_UNM = 49;
  static const int OP_BNOT = 50;
  static const int OP_NOT = 51;
  static const int OP_LEN = 52;
  static const int OP_CONCAT = 53;
  static const int OP_CLOSE = 54;
  static const int OP_TBC = 55;
  static const int OP_JMP = 56;
  static const int OP_EQ = 57;
  static const int OP_LT = 58;
  static const int OP_LE = 59;
  static const int OP_EQK = 60;
  static const int OP_EQI = 61;
  static const int OP_LTI = 62;
  static const int OP_LEI = 63;
  static const int OP_GTI = 64;
  static const int OP_GEI = 65;
  static const int OP_TEST = 66;
  static const int OP_TESTSET = 67;
  static const int OP_CALL = 68;
  static const int OP_TAILCALL = 69;
  static const int OP_RETURN = 70;
  static const int OP_RETURN0 = 71;
  static const int OP_RETURN1 = 72;
  static const int OP_FORLOOP = 73;
  static const int OP_FORPREP = 74;
  static const int OP_TFORPREP = 75;
  static const int OP_TFORCALL = 76;
  static const int OP_TFORLOOP = 77;
  static const int OP_SETLIST = 78;
  static const int OP_CLOSURE = 79;
  static const int OP_VARARG = 80;
  static const int OP_VARARGPREP = 81;
  static const int OP_EXTRAARG = 82;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int LUAI_IS32INT = 1;

const int LUA_INT_INT = 1;

const int LUA_INT_LONG = 2;

const int LUA_INT_LONGLONG = 3;

const int LUA_FLOAT_FLOAT = 1;

const int LUA_FLOAT_DOUBLE = 2;

const int LUA_FLOAT_LONGDOUBLE = 3;

const int LUA_INT_DEFAULT = 3;

const int LUA_FLOAT_DEFAULT = 2;

const int LUA_32BITS = 0;

const int LUA_C89_NUMBERS = 0;

const int LUA_INT_TYPE = 3;

const int LUA_FLOAT_TYPE = 2;

const String LUA_PATH_SEP = ';';

const String LUA_PATH_MARK = '?';

const String LUA_EXEC_DIR = '!';

const String LUA_VDIR = '5.4';

const String LUA_LDIR = '!\\lua\\';

const String LUA_CDIR = '!\\';

const String LUA_SHRDIR = '!\\..\\share\\lua\\5.4\\';

const String LUA_PATH_DEFAULT =
    '!\\lua\\?.lua;!\\lua\\?\\init.lua;!\\?.lua;!\\?\\init.lua;!\\..\\share\\lua\\5.4\\?.lua;!\\..\\share\\lua\\5.4\\?\\init.lua;.\\?.lua;.\\?\\init.lua';

const String LUA_CPATH_DEFAULT =
    '!\\?.dll;!\\..\\lib\\lua\\5.4\\?.dll;!\\loadall.dll;.\\?.dll';

const String LUA_DIRSEP = '\\';

const String LUA_NUMBER_FRMLEN = '';

const String LUA_NUMBER_FMT = '%.14g';

const String LUA_INTEGER_FMT = '%lld';

const int LUA_UNSIGNEDBITS = 64;

const String LUA_INTEGER_FRMLEN = 'll';

const int LUA_MAXINTEGER = 9223372036854775807;

const int LUA_MININTEGER = -9223372036854775808;

const int LUA_MAXUNSIGNED = -1;

const int LUAI_MAXSTACK = 1000000;

const int LUA_EXTRASPACE = 8;

const int LUA_IDSIZE = 60;

const int LUAL_BUFFERSIZE = 1024;

const String LUA_VERSION_MAJOR = '5';

const String LUA_VERSION_MINOR = '4';

const String LUA_VERSION_RELEASE = '3';

const int LUA_VERSION_NUM = 504;

const int LUA_VERSION_RELEASE_NUM = 50400;

const String LUA_VERSION = 'Lua 5.4';

const String LUA_RELEASE = 'Lua 5.4.3';

const String LUA_COPYRIGHT =
    'Lua 5.4.3  Copyright (C) 1994-2021 Lua.org, PUC-Rio';

const String LUA_AUTHORS = 'R. Ierusalimschy, L. H. de Figueiredo, W. Celes';

const String LUA_SIGNATURE = '\x1BLua';

const int LUA_MULTRET = -1;

const int LUA_REGISTRYINDEX = -1001000;

const int LUA_OK = 0;

const int LUA_YIELD = 1;

const int LUA_ERRRUN = 2;

const int LUA_ERRSYNTAX = 3;

const int LUA_ERRMEM = 4;

const int LUA_ERRERR = 5;

const int LUA_TNONE = -1;

const int LUA_TNIL = 0;

const int LUA_TBOOLEAN = 1;

const int LUA_TLIGHTUSERDATA = 2;

const int LUA_TNUMBER = 3;

const int LUA_TSTRING = 4;

const int LUA_TTABLE = 5;

const int LUA_TFUNCTION = 6;

const int LUA_TUSERDATA = 7;

const int LUA_TTHREAD = 8;

const int LUA_NUMTYPES = 9;

const int LUA_MINSTACK = 20;

const int LUA_RIDX_MAINTHREAD = 1;

const int LUA_RIDX_GLOBALS = 2;

const int LUA_RIDX_LAST = 2;

const int LUA_OPADD = 0;

const int LUA_OPSUB = 1;

const int LUA_OPMUL = 2;

const int LUA_OPMOD = 3;

const int LUA_OPPOW = 4;

const int LUA_OPDIV = 5;

const int LUA_OPIDIV = 6;

const int LUA_OPBAND = 7;

const int LUA_OPBOR = 8;

const int LUA_OPBXOR = 9;

const int LUA_OPSHL = 10;

const int LUA_OPSHR = 11;

const int LUA_OPUNM = 12;

const int LUA_OPBNOT = 13;

const int LUA_OPEQ = 0;

const int LUA_OPLT = 1;

const int LUA_OPLE = 2;

const int LUA_GCSTOP = 0;

const int LUA_GCRESTART = 1;

const int LUA_GCCOLLECT = 2;

const int LUA_GCCOUNT = 3;

const int LUA_GCCOUNTB = 4;

const int LUA_GCSTEP = 5;

const int LUA_GCSETPAUSE = 6;

const int LUA_GCSETSTEPMUL = 7;

const int LUA_GCISRUNNING = 9;

const int LUA_GCGEN = 10;

const int LUA_GCINC = 11;

const int LUA_NUMTAGS = 9;

const int LUA_HOOKCALL = 0;

const int LUA_HOOKRET = 1;

const int LUA_HOOKLINE = 2;

const int LUA_HOOKCOUNT = 3;

const int LUA_HOOKTAILCALL = 4;

const int LUA_MASKCALL = 1;

const int LUA_MASKRET = 2;

const int LUA_MASKLINE = 4;

const int LUA_MASKCOUNT = 8;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;

const String LUA_GNAME = '_G';

const int LUA_ERRFILE = 6;

const String LUA_LOADED_TABLE = '_LOADED';

const String LUA_PRELOAD_TABLE = '_PRELOAD';

const int LUAL_NUMSIZES = 136;

const int LUA_NOREF = -2;

const int LUA_REFNIL = -1;

const String LUA_FILEHANDLE = 'FILE*';

const int MAX_SIZET = -1;

const int MAX_SIZE = 9223372036854775807;

const int MAX_LUMEM = -1;

const int MAX_LMEM = 9223372036854775807;

const int MAX_INT = 2147483647;

const int LUAI_MAXSHORTLEN = 40;

const int MINSTRTABSIZE = 128;

const int STRCACHE_N = 53;

const int STRCACHE_M = 2;

const int LUA_MINBUFFER = 32;

const int LUAI_MAXCCALLS = 200;

const int LUA_TUPVAL = 9;

const int LUA_TPROTO = 10;

const int LUA_TDEADKEY = 11;

const int LUA_TOTALTYPES = 12;

const int LUA_VNIL = 0;

const int LUA_VEMPTY = 16;

const int LUA_VABSTKEY = 32;

const int LUA_VFALSE = 1;

const int LUA_VTRUE = 17;

const int LUA_VTHREAD = 8;

const int BIT_ISCOLLECTABLE = 64;

const int LUA_VNUMINT = 3;

const int LUA_VNUMFLT = 19;

const int LUA_VSHRSTR = 4;

const int LUA_VLNGSTR = 20;

const int LUA_VLIGHTUSERDATA = 2;

const int LUA_VUSERDATA = 7;

const int LUA_VPROTO = 10;

const int LUA_VUPVAL = 9;

const int LUA_VLCL = 6;

const int LUA_VLCF = 22;

const int LUA_VCCL = 38;

const int LUA_VTABLE = 5;

const int BITRAS = 128;

const int UTF8BUFFSZ = 8;

const int maskflags = 63;

const int EOZ = -1;

const int nyci = 65537;

const int NSIG = 23;

const int SIGINT = 2;

const int SIGILL = 4;

const int SIGFPE = 8;

const int SIGSEGV = 11;

const int SIGTERM = 15;

const int SIGBREAK = 21;

const int SIGABRT = 22;

const int SIGABRT_COMPAT = 6;

const int EXTRA_STACK = 5;

const int BASIC_STACK_SIZE = 40;

const int KGC_INC = 0;

const int KGC_GEN = 1;

const int CIST_OAH = 1;

const int CIST_C = 2;

const int CIST_FRESH = 4;

const int CIST_HOOKED = 8;

const int CIST_YPCALL = 16;

const int CIST_TAIL = 32;

const int CIST_HOOKYIELD = 64;

const int CIST_FIN = 128;

const int CIST_TRAN = 256;

const int CIST_CLSRET = 512;

const int CIST_RECST = 10;

const int ABSLINEINFO = -128;

const int MAXIWTHABS = 128;

const int SIZE_C = 8;

const int SIZE_B = 8;

const int SIZE_Bx = 17;

const int SIZE_A = 8;

const int SIZE_Ax = 25;

const int SIZE_sJ = 25;

const int SIZE_OP = 7;

const int POS_OP = 0;

const int POS_A = 7;

const int POS_k = 15;

const int POS_B = 16;

const int POS_C = 24;

const int POS_Bx = 15;

const int POS_Ax = 7;

const int POS_sJ = 7;

const int MAXARG_Bx = 131071;

const int OFFSET_sBx = 65535;

const int MAXARG_Ax = 33554431;

const int MAXARG_sJ = 33554431;

const int OFFSET_sJ = 16777215;

const int MAXARG_A = 255;

const int MAXARG_B = 255;

const int MAXARG_C = 255;

const int OFFSET_sC = 127;

const int MAXINDEXRK = 255;

const int NO_REG = 255;

const int NUM_OPCODES = 83;

const int LFIELDS_PER_FLUSH = 50;

const String LUAC_DATA = '\x19\x93\r\n\x1A\n';

const int LUAC_INT = 22136;

const double LUAC_NUM = 370.5;

const int LUAC_VERSION = 84;

const int LUAC_FORMAT = 0;
