/// Enumerations used by the package.
///
/// Automatically generated by `generate_enumerations.dart.
import 'error.dart';

/// Possible Lua types.
enum LuaType {
  /// LUA_TNONE = -1.
  none,

  /// LUA_TNIL = 0.
  nil,

  /// LUA_TBOOLEAN = 1.
  boolean,

  /// LUA_TLIGHTUSERDATA = 2.
  lightuserdata,

  /// LUA_TNUMBER = 3.
  number,

  /// LUA_TSTRING = 4.
  string,

  /// LUA_TTABLE = 5.
  table,

  /// LUA_TFUNCTION = 6.
  function,

  /// LUA_TUSERDATA = 7.
  userdata,

  /// LUA_TTHREAD = 8.
  thread,

  /// LUA_TUPVAL = 9.
  upval,

  /// LUA_TPROTO = 10.
  proto,

  /// LUA_TDEADKEY = 11.
  deadkey,
}

/// An extension for converting between Dart and C values.
extension LuaTypeToInt on LuaType {
  /// Return an integer.
  int toInt() {
    switch (this) {
      case LuaType.none:
        return -1;
      case LuaType.nil:
        return 0;
      case LuaType.boolean:
        return 1;
      case LuaType.lightuserdata:
        return 2;
      case LuaType.number:
        return 3;
      case LuaType.string:
        return 4;
      case LuaType.table:
        return 5;
      case LuaType.function:
        return 6;
      case LuaType.userdata:
        return 7;
      case LuaType.thread:
        return 8;
      case LuaType.upval:
        return 9;
      case LuaType.proto:
        return 10;
      case LuaType.deadkey:
        return 11;
    }
  }
}

/// An extension for converting between C and Dart values.
extension IntToLuaType on int {
  /// Return a Lua type.
  LuaType toLuaType() {
    switch (this) {
      case -1:
        return LuaType.none;
      case 0:
        return LuaType.nil;
      case 1:
        return LuaType.boolean;
      case 2:
        return LuaType.lightuserdata;
      case 3:
        return LuaType.number;
      case 4:
        return LuaType.string;
      case 5:
        return LuaType.table;
      case 6:
        return LuaType.function;
      case 7:
        return LuaType.userdata;
      case 8:
        return LuaType.thread;
      case 9:
        return LuaType.upval;
      case 10:
        return LuaType.proto;
      case 11:
        return LuaType.deadkey;
      default:
        throw LuaError(this, 'Unknown Lua type.');
    }
  }
}
